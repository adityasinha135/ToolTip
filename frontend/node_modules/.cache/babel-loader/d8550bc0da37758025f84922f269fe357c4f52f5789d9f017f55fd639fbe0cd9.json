{"ast":null,"code":"var _jsxFileName = \"/home/adityasinha/Desktop/React/topdf/src/Components/ReactPdf.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport Home from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReactPdf() {\n  _s();\n  const contentRef = useRef(null);\n  const downloadAsPdf = async () => {\n    try {\n      const element = contentRef.current;\n\n      // Capture the entire content of the webpage as an image using html2canvas\n      const canvas = await html2canvas(element, {\n        scrollY: -window.scrollY\n      });\n\n      // Calculate the aspect ratio for scaling to A4 size\n      const pdfWidth = 210;\n      const pdfHeight = canvas.height * pdfWidth / canvas.width;\n\n      // Create a new jspdf instance\n      const pdf = new jsPDF({\n        unit: 'mm',\n        format: 'a4'\n      });\n\n      // Add the image of the entire webpage to the PDF\n      pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n      // Download the PDF\n      pdf.save('webpage.pdf');\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Webpage to PDF Downloader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadAsPdf,\n      children: \"Download as PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(ReactPdf, \"76RymMQDwORkpkOdsElhIIY+DNc=\");\n_c = ReactPdf;\nexport default ReactPdf;\n\n// import React, { useRef } from 'react';\n// import html2canvas from 'html2canvas';\n// import jsPDF from 'jspdf';\n\n// function App() {\n//   const contentRef = useRef(null);\n\n//   const downloadAsPdf = async () => {\n//     try {\n//       const element = contentRef.current;\n\n//       // Capture the entire content of the webpage as an image using html2canvas\n//       const canvas = await html2canvas(element, {\n//         scrollY: -window.scrollY,\n//       });\n\n//       // Calculate the aspect ratio for scaling to A4 size\n//       const pdfWidth = 210;\n//       const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n//       // Create a new jspdf instance\n//       const pdf = new jsPDF({\n//         unit: 'mm',\n//         format: 'a4',\n//       });\n\n//       // Add the image of the entire webpage to the PDF\n//       pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n//       // Download the PDF\n//       pdf.save('webpage.pdf');\n//     } catch (error) {\n//       console.error('Error generating PDF:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Webpage to PDF Downloader</h1>\n//       <div ref={contentRef}>\n//         {/* Replace this with your actual webpage content */}\n//         <p>This is the content of the webpage that you want to convert to PDF.</p>\n//       </div>\n//       <button onClick={downloadAsPdf}>Download as PDF</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"ReactPdf\");","map":{"version":3,"names":["React","useRef","html2canvas","jsPDF","Home","jsxDEV","_jsxDEV","ReactPdf","_s","contentRef","downloadAsPdf","element","current","canvas","scrollY","window","pdfWidth","pdfHeight","height","width","pdf","unit","format","addImage","save","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["/home/adityasinha/Desktop/React/topdf/src/Components/ReactPdf.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nimport Home from './Home';\n\nfunction ReactPdf() {\n  const contentRef = useRef(null);\n\n  const downloadAsPdf = async () => {\n    try {\n      const element = contentRef.current;\n\n      // Capture the entire content of the webpage as an image using html2canvas\n      const canvas = await html2canvas(element, {\n        scrollY: -window.scrollY,\n      });\n\n      // Calculate the aspect ratio for scaling to A4 size\n      const pdfWidth = 210;\n      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n      // Create a new jspdf instance\n      const pdf = new jsPDF({\n        unit: 'mm',\n        format: 'a4',\n      });\n\n      // Add the image of the entire webpage to the PDF\n      pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n      // Download the PDF\n      pdf.save('webpage.pdf');\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Webpage to PDF Downloader</h1>\n      <div ref={contentRef}>\n        {/* Replace this with your actual webpage content */}\n        <Home></Home>\n      </div>\n      <button onClick={downloadAsPdf}>Download as PDF</button>\n    </div>\n  );\n}\n\nexport default ReactPdf;\n\n\n// import React, { useRef } from 'react';\n// import html2canvas from 'html2canvas';\n// import jsPDF from 'jspdf';\n\n// function App() {\n//   const contentRef = useRef(null);\n\n//   const downloadAsPdf = async () => {\n//     try {\n//       const element = contentRef.current;\n\n//       // Capture the entire content of the webpage as an image using html2canvas\n//       const canvas = await html2canvas(element, {\n//         scrollY: -window.scrollY,\n//       });\n\n//       // Calculate the aspect ratio for scaling to A4 size\n//       const pdfWidth = 210;\n//       const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n//       // Create a new jspdf instance\n//       const pdf = new jsPDF({\n//         unit: 'mm',\n//         format: 'a4',\n//       });\n\n//       // Add the image of the entire webpage to the PDF\n//       pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n//       // Download the PDF\n//       pdf.save('webpage.pdf');\n//     } catch (error) {\n//       console.error('Error generating PDF:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Webpage to PDF Downloader</h1>\n//       <div ref={contentRef}>\n//         {/* Replace this with your actual webpage content */}\n//         <p>This is the content of the webpage that you want to convert to PDF.</p>\n//       </div>\n//       <button onClick={downloadAsPdf}>Download as PDF</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,UAAU,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE/B,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,OAAO,GAAGF,UAAU,CAACG,OAAO;;MAElC;MACA,MAAMC,MAAM,GAAG,MAAMX,WAAW,CAACS,OAAO,EAAE;QACxCG,OAAO,EAAE,CAACC,MAAM,CAACD;MACnB,CAAC,CAAC;;MAEF;MACA,MAAME,QAAQ,GAAG,GAAG;MACpB,MAAMC,SAAS,GAAIJ,MAAM,CAACK,MAAM,GAAGF,QAAQ,GAAIH,MAAM,CAACM,KAAK;;MAE3D;MACA,MAAMC,GAAG,GAAG,IAAIjB,KAAK,CAAC;QACpBkB,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACAF,GAAG,CAACG,QAAQ,CAACV,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEG,QAAQ,EAAEC,SAAS,CAAC;;MAEtD;MACAG,GAAG,CAACI,IAAI,CAAC,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEnB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClCzB,OAAA;MAAK0B,GAAG,EAAEvB,UAAW;MAAAkB,QAAA,eAEnBrB,OAAA,CAACF,IAAI;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACNzB,OAAA;MAAQ2B,OAAO,EAAEvB,aAAc;MAAAiB,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV;AAACvB,EAAA,CA1CQD,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AA4CjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}