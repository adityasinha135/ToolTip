{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JSHandle } from '../api/JSHandle.js';\nimport { assert } from '../util/assert.js';\nimport { createJSHandle, releaseObject, valueFromRemoteObject, withSourcePuppeteerURLIfNone } from './util.js';\n/**\n * @internal\n */\nexport class CDPJSHandle extends JSHandle {\n  #disposed = false;\n  #context;\n  #remoteObject;\n  get disposed() {\n    return this.#disposed;\n  }\n  constructor(context, remoteObject) {\n    super();\n    this.#context = context;\n    this.#remoteObject = remoteObject;\n  }\n  executionContext() {\n    return this.#context;\n  }\n  get client() {\n    return this.#context._client;\n  }\n  /**\n   * @see {@link ExecutionContext.evaluate} for more details.\n   */\n  async evaluate(pageFunction, ...args) {\n    pageFunction = withSourcePuppeteerURLIfNone(this.evaluate.name, pageFunction);\n    return await this.executionContext().evaluate(pageFunction, this, ...args);\n  }\n  /**\n   * @see {@link ExecutionContext.evaluateHandle} for more details.\n   */\n  async evaluateHandle(pageFunction, ...args) {\n    pageFunction = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, pageFunction);\n    return await this.executionContext().evaluateHandle(pageFunction, this, ...args);\n  }\n  async getProperty(propertyName) {\n    return this.evaluateHandle((object, propertyName) => {\n      return object[propertyName];\n    }, propertyName);\n  }\n  async getProperties() {\n    assert(this.#remoteObject.objectId);\n    // We use Runtime.getProperties rather than iterative building because the\n    // iterative approach might create a distorted snapshot.\n    const response = await this.client.send('Runtime.getProperties', {\n      objectId: this.#remoteObject.objectId,\n      ownProperties: true\n    });\n    const result = new Map();\n    for (const property of response.result) {\n      if (!property.enumerable || !property.value) {\n        continue;\n      }\n      result.set(property.name, createJSHandle(this.#context, property.value));\n    }\n    return result;\n  }\n  async jsonValue() {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  asElement() {\n    return null;\n  }\n  async dispose() {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n  toString() {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n  get id() {\n    return this.#remoteObject.objectId;\n  }\n  remoteObject() {\n    return this.#remoteObject;\n  }\n}","map":{"version":3,"names":["JSHandle","assert","createJSHandle","releaseObject","valueFromRemoteObject","withSourcePuppeteerURLIfNone","CDPJSHandle","disposed","context","remoteObject","constructor","executionContext","client","_client","evaluate","pageFunction","args","name","evaluateHandle","getProperty","propertyName","object","getProperties","objectId","response","send","ownProperties","result","Map","property","enumerable","value","set","jsonValue","undefined","Error","asElement","dispose","toString","type","subtype","id"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/JSHandle.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Protocol} from 'devtools-protocol';\n\nimport {JSHandle} from '../api/JSHandle.js';\nimport {assert} from '../util/assert.js';\n\nimport {CDPSession} from './Connection.js';\nimport type {CDPElementHandle} from './ElementHandle.js';\nimport {ExecutionContext} from './ExecutionContext.js';\nimport {EvaluateFuncWith, HandleFor, HandleOr} from './types.js';\nimport {\n  createJSHandle,\n  releaseObject,\n  valueFromRemoteObject,\n  withSourcePuppeteerURLIfNone,\n} from './util.js';\n\n/**\n * @internal\n */\nexport class CDPJSHandle<T = unknown> extends JSHandle<T> {\n  #disposed = false;\n  #context: ExecutionContext;\n  #remoteObject: Protocol.Runtime.RemoteObject;\n\n  override get disposed(): boolean {\n    return this.#disposed;\n  }\n\n  constructor(\n    context: ExecutionContext,\n    remoteObject: Protocol.Runtime.RemoteObject\n  ) {\n    super();\n    this.#context = context;\n    this.#remoteObject = remoteObject;\n  }\n\n  override executionContext(): ExecutionContext {\n    return this.#context;\n  }\n\n  override get client(): CDPSession {\n    return this.#context._client;\n  }\n\n  /**\n   * @see {@link ExecutionContext.evaluate} for more details.\n   */\n  override async evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>> {\n    pageFunction = withSourcePuppeteerURLIfNone(\n      this.evaluate.name,\n      pageFunction\n    );\n    return await this.executionContext().evaluate(pageFunction, this, ...args);\n  }\n\n  /**\n   * @see {@link ExecutionContext.evaluateHandle} for more details.\n   */\n  override async evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>> {\n    pageFunction = withSourcePuppeteerURLIfNone(\n      this.evaluateHandle.name,\n      pageFunction\n    );\n    return await this.executionContext().evaluateHandle(\n      pageFunction,\n      this,\n      ...args\n    );\n  }\n\n  override async getProperty<K extends keyof T>(\n    propertyName: HandleOr<K>\n  ): Promise<HandleFor<T[K]>>;\n  override async getProperty(propertyName: string): Promise<JSHandle<unknown>>;\n  override async getProperty<K extends keyof T>(\n    propertyName: HandleOr<K>\n  ): Promise<HandleFor<T[K]>> {\n    return this.evaluateHandle((object, propertyName) => {\n      return object[propertyName as K];\n    }, propertyName);\n  }\n\n  override async getProperties(): Promise<Map<string, JSHandle>> {\n    assert(this.#remoteObject.objectId);\n    // We use Runtime.getProperties rather than iterative building because the\n    // iterative approach might create a distorted snapshot.\n    const response = await this.client.send('Runtime.getProperties', {\n      objectId: this.#remoteObject.objectId,\n      ownProperties: true,\n    });\n    const result = new Map<string, JSHandle>();\n    for (const property of response.result) {\n      if (!property.enumerable || !property.value) {\n        continue;\n      }\n      result.set(property.name, createJSHandle(this.#context, property.value));\n    }\n    return result;\n  }\n\n  override async jsonValue(): Promise<T> {\n    if (!this.#remoteObject.objectId) {\n      return valueFromRemoteObject(this.#remoteObject);\n    }\n    const value = await this.evaluate(object => {\n      return object;\n    });\n    if (value === undefined) {\n      throw new Error('Could not serialize referenced object');\n    }\n    return value;\n  }\n\n  /**\n   * Either `null` or the handle itself if the handle is an\n   * instance of {@link ElementHandle}.\n   */\n  override asElement(): CDPElementHandle<Node> | null {\n    return null;\n  }\n\n  override async dispose(): Promise<void> {\n    if (this.#disposed) {\n      return;\n    }\n    this.#disposed = true;\n    await releaseObject(this.client, this.#remoteObject);\n  }\n\n  override toString(): string {\n    if (!this.#remoteObject.objectId) {\n      return 'JSHandle:' + valueFromRemoteObject(this.#remoteObject);\n    }\n    const type = this.#remoteObject.subtype || this.#remoteObject.type;\n    return 'JSHandle@' + type;\n  }\n\n  override get id(): string | undefined {\n    return this.#remoteObject.objectId;\n  }\n\n  override remoteObject(): Protocol.Runtime.RemoteObject {\n    return this.#remoteObject;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAAQA,QAAQ,QAAO,oBAAoB;AAC3C,SAAQC,MAAM,QAAO,mBAAmB;AAMxC,SACEC,cAAc,EACdC,aAAa,EACbC,qBAAqB,EACrBC,4BAA4B,QACvB,WAAW;AAElB;;;AAGA,OAAM,MAAOC,WAAyB,SAAQN,QAAW;EACvD,CAAAO,QAAS,GAAG,KAAK;EACjB,CAAAC,OAAQ;EACR,CAAAC,YAAa;EAEb,IAAaF,QAAQA,CAAA;IACnB,OAAO,IAAI,CAAC,CAAAA,QAAS;EACvB;EAEAG,YACEF,OAAyB,EACzBC,YAA2C;IAE3C,KAAK,EAAE;IACP,IAAI,CAAC,CAAAD,OAAQ,GAAGA,OAAO;IACvB,IAAI,CAAC,CAAAC,YAAa,GAAGA,YAAY;EACnC;EAESE,gBAAgBA,CAAA;IACvB,OAAO,IAAI,CAAC,CAAAH,OAAQ;EACtB;EAEA,IAAaI,MAAMA,CAAA;IACjB,OAAO,IAAI,CAAC,CAAAJ,OAAQ,CAACK,OAAO;EAC9B;EAEA;;;EAGS,MAAMC,QAAQA,CAIrBC,YAA2B,EAC3B,GAAGC,IAAY;IAEfD,YAAY,GAAGV,4BAA4B,CACzC,IAAI,CAACS,QAAQ,CAACG,IAAI,EAClBF,YAAY,CACb;IACD,OAAO,MAAM,IAAI,CAACJ,gBAAgB,EAAE,CAACG,QAAQ,CAACC,YAAY,EAAE,IAAI,EAAE,GAAGC,IAAI,CAAC;EAC5E;EAEA;;;EAGS,MAAME,cAAcA,CAI3BH,YAA2B,EAC3B,GAAGC,IAAY;IAEfD,YAAY,GAAGV,4BAA4B,CACzC,IAAI,CAACa,cAAc,CAACD,IAAI,EACxBF,YAAY,CACb;IACD,OAAO,MAAM,IAAI,CAACJ,gBAAgB,EAAE,CAACO,cAAc,CACjDH,YAAY,EACZ,IAAI,EACJ,GAAGC,IAAI,CACR;EACH;EAMS,MAAMG,WAAWA,CACxBC,YAAyB;IAEzB,OAAO,IAAI,CAACF,cAAc,CAAC,CAACG,MAAM,EAAED,YAAY,KAAI;MAClD,OAAOC,MAAM,CAACD,YAAiB,CAAC;IAClC,CAAC,EAAEA,YAAY,CAAC;EAClB;EAES,MAAME,aAAaA,CAAA;IAC1BrB,MAAM,CAAC,IAAI,CAAC,CAAAQ,YAAa,CAACc,QAAQ,CAAC;IACnC;IACA;IACA,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACZ,MAAM,CAACa,IAAI,CAAC,uBAAuB,EAAE;MAC/DF,QAAQ,EAAE,IAAI,CAAC,CAAAd,YAAa,CAACc,QAAQ;MACrCG,aAAa,EAAE;KAChB,CAAC;IACF,MAAMC,MAAM,GAAG,IAAIC,GAAG,EAAoB;IAC1C,KAAK,MAAMC,QAAQ,IAAIL,QAAQ,CAACG,MAAM,EAAE;MACtC,IAAI,CAACE,QAAQ,CAACC,UAAU,IAAI,CAACD,QAAQ,CAACE,KAAK,EAAE;QAC3C;;MAEFJ,MAAM,CAACK,GAAG,CAACH,QAAQ,CAACZ,IAAI,EAAEf,cAAc,CAAC,IAAI,CAAC,CAAAM,OAAQ,EAAEqB,QAAQ,CAACE,KAAK,CAAC,CAAC;;IAE1E,OAAOJ,MAAM;EACf;EAES,MAAMM,SAASA,CAAA;IACtB,IAAI,CAAC,IAAI,CAAC,CAAAxB,YAAa,CAACc,QAAQ,EAAE;MAChC,OAAOnB,qBAAqB,CAAC,IAAI,CAAC,CAAAK,YAAa,CAAC;;IAElD,MAAMsB,KAAK,GAAG,MAAM,IAAI,CAACjB,QAAQ,CAACO,MAAM,IAAG;MACzC,OAAOA,MAAM;IACf,CAAC,CAAC;IACF,IAAIU,KAAK,KAAKG,SAAS,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;;IAE1D,OAAOJ,KAAK;EACd;EAEA;;;;EAISK,SAASA,CAAA;IAChB,OAAO,IAAI;EACb;EAES,MAAMC,OAAOA,CAAA;IACpB,IAAI,IAAI,CAAC,CAAA9B,QAAS,EAAE;MAClB;;IAEF,IAAI,CAAC,CAAAA,QAAS,GAAG,IAAI;IACrB,MAAMJ,aAAa,CAAC,IAAI,CAACS,MAAM,EAAE,IAAI,CAAC,CAAAH,YAAa,CAAC;EACtD;EAES6B,QAAQA,CAAA;IACf,IAAI,CAAC,IAAI,CAAC,CAAA7B,YAAa,CAACc,QAAQ,EAAE;MAChC,OAAO,WAAW,GAAGnB,qBAAqB,CAAC,IAAI,CAAC,CAAAK,YAAa,CAAC;;IAEhE,MAAM8B,IAAI,GAAG,IAAI,CAAC,CAAA9B,YAAa,CAAC+B,OAAO,IAAI,IAAI,CAAC,CAAA/B,YAAa,CAAC8B,IAAI;IAClE,OAAO,WAAW,GAAGA,IAAI;EAC3B;EAEA,IAAaE,EAAEA,CAAA;IACb,OAAO,IAAI,CAAC,CAAAhC,YAAa,CAACc,QAAQ;EACpC;EAESd,YAAYA,CAAA;IACnB,OAAO,IAAI,CAAC,CAAAA,YAAa;EAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}