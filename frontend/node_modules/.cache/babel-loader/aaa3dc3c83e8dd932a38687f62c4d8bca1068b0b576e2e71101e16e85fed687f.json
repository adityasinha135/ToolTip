{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport mitt from '../../third_party/mitt/index.js';\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter {\n  emitter;\n  eventsMap = new Map();\n  /**\n   * @internal\n   */\n  constructor() {\n    this.emitter = mitt(this.eventsMap);\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param event - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(event, handler) {\n    this.emitter.on(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param event - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(event, handler) {\n    this.emitter.off(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener.\n   * @deprecated please use {@link EventEmitter.off} instead.\n   */\n  removeListener(event, handler) {\n    this.off(event, handler);\n    return this;\n  }\n  /**\n   * Add an event listener.\n   * @deprecated please use {@link EventEmitter.on} instead.\n   */\n  addListener(event, handler) {\n    this.on(event, handler);\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param event - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(event, eventData) {\n    this.emitter.emit(event, eventData);\n    return this.eventListenersCount(event) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param event - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(event, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(event, onceHandler);\n    };\n    return this.on(event, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param event - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(event) {\n    return this.eventListenersCount(event);\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   * @param event - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.eventsMap.delete(event);\n    } else {\n      this.eventsMap.clear();\n    }\n    return this;\n  }\n  eventListenersCount(event) {\n    return this.eventsMap.get(event)?.length || 0;\n  }\n}","map":{"version":3,"names":["mitt","EventEmitter","emitter","eventsMap","Map","constructor","on","event","handler","off","removeListener","addListener","emit","eventData","eventListenersCount","once","onceHandler","listenerCount","removeAllListeners","delete","clear","get","length"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/EventEmitter.ts"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport mitt, {Emitter, EventHandlerMap} from '../../third_party/mitt/index.js';\n\n/**\n * @public\n */\nexport type EventType = string | symbol;\n/**\n * @public\n */\nexport type Handler<T = unknown> = (event: T) => void;\n\n/**\n * @public\n */\nexport interface CommonEventEmitter {\n  on(event: EventType, handler: Handler): this;\n  off(event: EventType, handler: Handler): this;\n  /* To maintain parity with the built in NodeJS event emitter which uses removeListener\n   * rather than `off`.\n   * If you're implementing new code you should use `off`.\n   */\n  addListener(event: EventType, handler: Handler): this;\n  removeListener(event: EventType, handler: Handler): this;\n  emit(event: EventType, eventData?: unknown): boolean;\n  once(event: EventType, handler: Handler): this;\n  listenerCount(event: string): number;\n\n  removeAllListeners(event?: EventType): this;\n}\n\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nexport class EventEmitter implements CommonEventEmitter {\n  private emitter: Emitter<Record<string | symbol, any>>;\n  private eventsMap: EventHandlerMap<Record<string | symbol, any>> = new Map();\n\n  /**\n   * @internal\n   */\n  constructor() {\n    this.emitter = mitt(this.eventsMap);\n  }\n\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param event - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n  on(event: EventType, handler: Handler<any>): this {\n    this.emitter.on(event, handler);\n    return this;\n  }\n\n  /**\n   * Remove an event listener from firing.\n   * @param event - the event type you'd like to stop listening to.\n   * @param handler - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n  off(event: EventType, handler: Handler<any>): this {\n    this.emitter.off(event, handler);\n    return this;\n  }\n\n  /**\n   * Remove an event listener.\n   * @deprecated please use {@link EventEmitter.off} instead.\n   */\n  removeListener(event: EventType, handler: Handler<any>): this {\n    this.off(event, handler);\n    return this;\n  }\n\n  /**\n   * Add an event listener.\n   * @deprecated please use {@link EventEmitter.on} instead.\n   */\n  addListener(event: EventType, handler: Handler<any>): this {\n    this.on(event, handler);\n    return this;\n  }\n\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param event - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n  emit(event: EventType, eventData?: unknown): boolean {\n    this.emitter.emit(event, eventData);\n    return this.eventListenersCount(event) > 0;\n  }\n\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param event - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n  once(event: EventType, handler: Handler<any>): this {\n    const onceHandler: Handler<any> = eventData => {\n      handler(eventData);\n      this.off(event, onceHandler);\n    };\n\n    return this.on(event, onceHandler);\n  }\n\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param event - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n  listenerCount(event: EventType): number {\n    return this.eventListenersCount(event);\n  }\n\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   * @param event - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n  removeAllListeners(event?: EventType): this {\n    if (event) {\n      this.eventsMap.delete(event);\n    } else {\n      this.eventsMap.clear();\n    }\n    return this;\n  }\n\n  private eventListenersCount(event: EventType): number {\n    return this.eventsMap.get(event)?.length || 0;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAOA,IAAgC,MAAM,iCAAiC;AA8B9E;;;;;;;;;;;;AAYA,OAAM,MAAOC,YAAY;EACfC,OAAO;EACPC,SAAS,GAAkD,IAAIC,GAAG,EAAE;EAE5E;;;EAGAC,YAAA;IACE,IAAI,CAACH,OAAO,GAAGF,IAAI,CAAC,IAAI,CAACG,SAAS,CAAC;EACrC;EAEA;;;;;;EAMAG,EAAEA,CAACC,KAAgB,EAAEC,OAAqB;IACxC,IAAI,CAACN,OAAO,CAACI,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;EAMAC,GAAGA,CAACF,KAAgB,EAAEC,OAAqB;IACzC,IAAI,CAACN,OAAO,CAACO,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EAEA;;;;EAIAE,cAAcA,CAACH,KAAgB,EAAEC,OAAqB;IACpD,IAAI,CAACC,GAAG,CAACF,KAAK,EAAEC,OAAO,CAAC;IACxB,OAAO,IAAI;EACb;EAEA;;;;EAIAG,WAAWA,CAACJ,KAAgB,EAAEC,OAAqB;IACjD,IAAI,CAACF,EAAE,CAACC,KAAK,EAAEC,OAAO,CAAC;IACvB,OAAO,IAAI;EACb;EAEA;;;;;;;EAOAI,IAAIA,CAACL,KAAgB,EAAEM,SAAmB;IACxC,IAAI,CAACX,OAAO,CAACU,IAAI,CAACL,KAAK,EAAEM,SAAS,CAAC;IACnC,OAAO,IAAI,CAACC,mBAAmB,CAACP,KAAK,CAAC,GAAG,CAAC;EAC5C;EAEA;;;;;;EAMAQ,IAAIA,CAACR,KAAgB,EAAEC,OAAqB;IAC1C,MAAMQ,WAAW,GAAiBH,SAAS,IAAG;MAC5CL,OAAO,CAACK,SAAS,CAAC;MAClB,IAAI,CAACJ,GAAG,CAACF,KAAK,EAAES,WAAW,CAAC;IAC9B,CAAC;IAED,OAAO,IAAI,CAACV,EAAE,CAACC,KAAK,EAAES,WAAW,CAAC;EACpC;EAEA;;;;;;EAMAC,aAAaA,CAACV,KAAgB;IAC5B,OAAO,IAAI,CAACO,mBAAmB,CAACP,KAAK,CAAC;EACxC;EAEA;;;;;;EAMAW,kBAAkBA,CAACX,KAAiB;IAClC,IAAIA,KAAK,EAAE;MACT,IAAI,CAACJ,SAAS,CAACgB,MAAM,CAACZ,KAAK,CAAC;KAC7B,MAAM;MACL,IAAI,CAACJ,SAAS,CAACiB,KAAK,EAAE;;IAExB,OAAO,IAAI;EACb;EAEQN,mBAAmBA,CAACP,KAAgB;IAC1C,OAAO,IAAI,CAACJ,SAAS,CAACkB,GAAG,CAACd,KAAK,CAAC,EAAEe,MAAM,IAAI,CAAC;EAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}