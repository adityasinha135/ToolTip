{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert.js';\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n *\n * @public\n */\nexport class Dialog {\n  #type;\n  #message;\n  #defaultValue;\n  #handled = false;\n  /**\n   * @internal\n   */\n  constructor(type, message, defaultValue = '') {\n    this.#type = type;\n    this.#message = message;\n    this.#defaultValue = defaultValue;\n  }\n  /**\n   * The type of the dialog.\n   */\n  type() {\n    return this.#type;\n  }\n  /**\n   * The message displayed in the dialog.\n   */\n  message() {\n    return this.#message;\n  }\n  /**\n   * The default value of the prompt, or an empty string if the dialog\n   * is not a `prompt`.\n   */\n  defaultValue() {\n    return this.#defaultValue;\n  }\n  /**\n   * @internal\n   */\n  sendCommand(_options) {\n    throw new Error('Not implemented');\n  }\n  /**\n   * A promise that resolves when the dialog has been accepted.\n   *\n   * @param promptText - optional text that will be entered in the dialog\n   * prompt. Has no effect if the dialog's type is not `prompt`.\n   *\n   */\n  async accept(promptText) {\n    assert(!this.#handled, 'Cannot accept dialog which is already handled!');\n    this.#handled = true;\n    await this.sendCommand({\n      accept: true,\n      text: promptText\n    });\n  }\n  /**\n   * A promise which will resolve once the dialog has been dismissed\n   */\n  async dismiss() {\n    assert(!this.#handled, 'Cannot dismiss dialog which is already handled!');\n    this.#handled = true;\n    await this.sendCommand({\n      accept: false\n    });\n  }\n}","map":{"version":3,"names":["assert","Dialog","type","message","defaultValue","handled","constructor","sendCommand","_options","Error","accept","promptText","text","dismiss"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/api/Dialog.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Protocol} from 'devtools-protocol';\n\nimport {assert} from '../util/assert.js';\n\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n *\n * ```ts\n * import puppeteer from 'puppeteer';\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n *\n * @public\n */\nexport class Dialog {\n  #type: Protocol.Page.DialogType;\n  #message: string;\n  #defaultValue: string;\n  #handled = false;\n\n  /**\n   * @internal\n   */\n  constructor(\n    type: Protocol.Page.DialogType,\n    message: string,\n    defaultValue = ''\n  ) {\n    this.#type = type;\n    this.#message = message;\n    this.#defaultValue = defaultValue;\n  }\n\n  /**\n   * The type of the dialog.\n   */\n  type(): Protocol.Page.DialogType {\n    return this.#type;\n  }\n\n  /**\n   * The message displayed in the dialog.\n   */\n  message(): string {\n    return this.#message;\n  }\n\n  /**\n   * The default value of the prompt, or an empty string if the dialog\n   * is not a `prompt`.\n   */\n  defaultValue(): string {\n    return this.#defaultValue;\n  }\n\n  /**\n   * @internal\n   */\n  sendCommand(_options: {accept: boolean; text?: string}): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * A promise that resolves when the dialog has been accepted.\n   *\n   * @param promptText - optional text that will be entered in the dialog\n   * prompt. Has no effect if the dialog's type is not `prompt`.\n   *\n   */\n  async accept(promptText?: string): Promise<void> {\n    assert(!this.#handled, 'Cannot accept dialog which is already handled!');\n    this.#handled = true;\n    await this.sendCommand({\n      accept: true,\n      text: promptText,\n    });\n  }\n\n  /**\n   * A promise which will resolve once the dialog has been dismissed\n   */\n  async dismiss(): Promise<void> {\n    assert(!this.#handled, 'Cannot dismiss dialog which is already handled!');\n    this.#handled = true;\n    await this.sendCommand({\n      accept: false,\n    });\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAAQA,MAAM,QAAO,mBAAmB;AAExC;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,MAAOC,MAAM;EACjB,CAAAC,IAAK;EACL,CAAAC,OAAQ;EACR,CAAAC,YAAa;EACb,CAAAC,OAAQ,GAAG,KAAK;EAEhB;;;EAGAC,YACEJ,IAA8B,EAC9BC,OAAe,EACfC,YAAY,GAAG,EAAE;IAEjB,IAAI,CAAC,CAAAF,IAAK,GAAGA,IAAI;IACjB,IAAI,CAAC,CAAAC,OAAQ,GAAGA,OAAO;IACvB,IAAI,CAAC,CAAAC,YAAa,GAAGA,YAAY;EACnC;EAEA;;;EAGAF,IAAIA,CAAA;IACF,OAAO,IAAI,CAAC,CAAAA,IAAK;EACnB;EAEA;;;EAGAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAAC,CAAAA,OAAQ;EACtB;EAEA;;;;EAIAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAAC,CAAAA,YAAa;EAC3B;EAEA;;;EAGAG,WAAWA,CAACC,QAA0C;IACpD,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;EAOA,MAAMC,MAAMA,CAACC,UAAmB;IAC9BX,MAAM,CAAC,CAAC,IAAI,CAAC,CAAAK,OAAQ,EAAE,gDAAgD,CAAC;IACxE,IAAI,CAAC,CAAAA,OAAQ,GAAG,IAAI;IACpB,MAAM,IAAI,CAACE,WAAW,CAAC;MACrBG,MAAM,EAAE,IAAI;MACZE,IAAI,EAAED;KACP,CAAC;EACJ;EAEA;;;EAGA,MAAME,OAAOA,CAAA;IACXb,MAAM,CAAC,CAAC,IAAI,CAAC,CAAAK,OAAQ,EAAE,iDAAiD,CAAC;IACzE,IAAI,CAAC,CAAAA,OAAQ,GAAG,IAAI;IACpB,MAAM,IAAI,CAACE,WAAW,CAAC;MACrBG,MAAM,EAAE;KACT,CAAC;EACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}