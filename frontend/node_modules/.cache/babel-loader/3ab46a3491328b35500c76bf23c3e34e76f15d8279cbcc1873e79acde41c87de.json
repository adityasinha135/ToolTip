{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert.js';\nimport { interpolateFunction, stringifyFunction } from '../util/Function.js';\nimport { QueryHandler } from './QueryHandler.js';\nimport { scriptInjector } from './ScriptInjector.js';\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nexport class CustomQueryHandlerRegistry {\n  #handlers = new Map();\n  /**\n   * @internal\n   */\n  get(name) {\n    const handler = this.#handlers.get(name);\n    return handler ? handler[1] : undefined;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   *\n   * @internal\n   */\n  register(name, handler) {\n    if (this.#handlers.has(name)) {\n      throw new Error(`Cannot register over existing handler: ${name}`);\n    }\n    assert(!this.#handlers.has(name), `Cannot register over existing handler: ${name}`);\n    assert(/^[a-zA-Z]+$/.test(name), `Custom query handler names may only contain [a-zA-Z]`);\n    assert(handler.queryAll || handler.queryOne, `At least one query method must be implemented.`);\n    const Handler = class extends QueryHandler {\n      static querySelectorAll = interpolateFunction((node, selector, PuppeteerUtil) => {\n        return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelectorAll(node, selector);\n      }, {\n        name: JSON.stringify(name)\n      });\n      static querySelector = interpolateFunction((node, selector, PuppeteerUtil) => {\n        return PuppeteerUtil.customQuerySelectors.get(PLACEHOLDER('name')).querySelector(node, selector);\n      }, {\n        name: JSON.stringify(name)\n      });\n    };\n    const registerScript = interpolateFunction(PuppeteerUtil => {\n      PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n        queryAll: PLACEHOLDER('queryAll'),\n        queryOne: PLACEHOLDER('queryOne')\n      });\n    }, {\n      name: JSON.stringify(name),\n      queryAll: handler.queryAll ? stringifyFunction(handler.queryAll) : String(undefined),\n      queryOne: handler.queryOne ? stringifyFunction(handler.queryOne) : String(undefined)\n    }).toString();\n    this.#handlers.set(name, [registerScript, Handler]);\n    scriptInjector.append(registerScript);\n  }\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   *\n   * @internal\n   */\n  unregister(name) {\n    const handler = this.#handlers.get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    scriptInjector.pop(handler[0]);\n    this.#handlers.delete(name);\n  }\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   *\n   * @internal\n   */\n  names() {\n    return [...this.#handlers.keys()];\n  }\n  /**\n   * Unregisters all custom query handlers.\n   *\n   * @internal\n   */\n  clear() {\n    for (const [registerScript] of this.#handlers) {\n      scriptInjector.pop(registerScript);\n    }\n    this.#handlers.clear();\n  }\n}\n/**\n * @internal\n */\nexport const customQueryHandlers = new CustomQueryHandlerRegistry();\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nexport function registerCustomQueryHandler(name, handler) {\n  customQueryHandlers.register(name, handler);\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nexport function unregisterCustomQueryHandler(name) {\n  customQueryHandlers.unregister(name);\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nexport function customQueryHandlerNames() {\n  return customQueryHandlers.names();\n}\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nexport function clearCustomQueryHandlers() {\n  customQueryHandlers.clear();\n}","map":{"version":3,"names":["assert","interpolateFunction","stringifyFunction","QueryHandler","scriptInjector","CustomQueryHandlerRegistry","handlers","Map","get","name","handler","undefined","register","has","Error","test","queryAll","queryOne","Handler","querySelectorAll","node","selector","PuppeteerUtil","customQuerySelectors","PLACEHOLDER","JSON","stringify","querySelector","registerScript","String","toString","set","append","unregister","pop","delete","names","keys","clear","customQueryHandlers","registerCustomQueryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/CustomQueryHandler.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type PuppeteerUtil from '../injected/injected.js';\nimport {assert} from '../util/assert.js';\nimport {interpolateFunction, stringifyFunction} from '../util/Function.js';\n\nimport {QueryHandler, QuerySelector, QuerySelectorAll} from './QueryHandler.js';\nimport {scriptInjector} from './ScriptInjector.js';\n\n/**\n * @public\n */\nexport interface CustomQueryHandler {\n  /**\n   * Searches for a {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Node} matching the given `selector` from {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | node}.\n   */\n  queryOne?: (node: Node, selector: string) => Node | null;\n  /**\n   * Searches for some {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | Nodes} matching the given `selector` from {@link https://developer.mozilla.org/en-US/docs/Web/API/Node | node}.\n   */\n  queryAll?: (node: Node, selector: string) => Iterable<Node>;\n}\n\n/**\n * The registry of {@link CustomQueryHandler | custom query handlers}.\n *\n * @example\n *\n * ```ts\n * Puppeteer.customQueryHandlers.register('lit', { … });\n * const aHandle = await page.$('lit/…');\n * ```\n *\n * @internal\n */\nexport class CustomQueryHandlerRegistry {\n  #handlers = new Map<\n    string,\n    [registerScript: string, Handler: typeof QueryHandler]\n  >();\n\n  /**\n   * @internal\n   */\n  get(name: string): typeof QueryHandler | undefined {\n    const handler = this.#handlers.get(name);\n    return handler ? handler[1] : undefined;\n  }\n\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}.\n   *\n   * @remarks\n   * After registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   *\n   * @example\n   *\n   * ```ts\n   * Puppeteer.customQueryHandlers.register('lit', { … });\n   * const aHandle = await page.$('lit/…');\n   * ```\n   *\n   * @param name - Name to register under.\n   * @param queryHandler - {@link CustomQueryHandler | Custom query handler} to\n   * register.\n   *\n   * @internal\n   */\n  register(name: string, handler: CustomQueryHandler): void {\n    if (this.#handlers.has(name)) {\n      throw new Error(`Cannot register over existing handler: ${name}`);\n    }\n    assert(\n      !this.#handlers.has(name),\n      `Cannot register over existing handler: ${name}`\n    );\n    assert(\n      /^[a-zA-Z]+$/.test(name),\n      `Custom query handler names may only contain [a-zA-Z]`\n    );\n    assert(\n      handler.queryAll || handler.queryOne,\n      `At least one query method must be implemented.`\n    );\n\n    const Handler = class extends QueryHandler {\n      static override querySelectorAll: QuerySelectorAll = interpolateFunction(\n        (node, selector, PuppeteerUtil) => {\n          return PuppeteerUtil.customQuerySelectors\n            .get(PLACEHOLDER('name'))!\n            .querySelectorAll(node, selector);\n        },\n        {name: JSON.stringify(name)}\n      );\n      static override querySelector: QuerySelector = interpolateFunction(\n        (node, selector, PuppeteerUtil) => {\n          return PuppeteerUtil.customQuerySelectors\n            .get(PLACEHOLDER('name'))!\n            .querySelector(node, selector);\n        },\n        {name: JSON.stringify(name)}\n      );\n    };\n    const registerScript = interpolateFunction(\n      (PuppeteerUtil: PuppeteerUtil) => {\n        PuppeteerUtil.customQuerySelectors.register(PLACEHOLDER('name'), {\n          queryAll: PLACEHOLDER('queryAll'),\n          queryOne: PLACEHOLDER('queryOne'),\n        });\n      },\n      {\n        name: JSON.stringify(name),\n        queryAll: handler.queryAll\n          ? stringifyFunction(handler.queryAll)\n          : String(undefined),\n        queryOne: handler.queryOne\n          ? stringifyFunction(handler.queryOne)\n          : String(undefined),\n      }\n    ).toString();\n\n    this.#handlers.set(name, [registerScript, Handler]);\n    scriptInjector.append(registerScript);\n  }\n\n  /**\n   * Unregisters the {@link CustomQueryHandler | custom query handler} for the\n   * given name.\n   *\n   * @throws `Error` if there is no handler under the given name.\n   *\n   * @internal\n   */\n  unregister(name: string): void {\n    const handler = this.#handlers.get(name);\n    if (!handler) {\n      throw new Error(`Cannot unregister unknown handler: ${name}`);\n    }\n    scriptInjector.pop(handler[0]);\n    this.#handlers.delete(name);\n  }\n\n  /**\n   * Gets the names of all {@link CustomQueryHandler | custom query handlers}.\n   *\n   * @internal\n   */\n  names(): string[] {\n    return [...this.#handlers.keys()];\n  }\n\n  /**\n   * Unregisters all custom query handlers.\n   *\n   * @internal\n   */\n  clear(): void {\n    for (const [registerScript] of this.#handlers) {\n      scriptInjector.pop(registerScript);\n    }\n    this.#handlers.clear();\n  }\n}\n\n/**\n * @internal\n */\nexport const customQueryHandlers = new CustomQueryHandlerRegistry();\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.registerCustomQueryHandler}\n *\n * @public\n */\nexport function registerCustomQueryHandler(\n  name: string,\n  handler: CustomQueryHandler\n): void {\n  customQueryHandlers.register(name, handler);\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.unregisterCustomQueryHandler}\n *\n * @public\n */\nexport function unregisterCustomQueryHandler(name: string): void {\n  customQueryHandlers.unregister(name);\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.customQueryHandlerNames}\n *\n * @public\n */\nexport function customQueryHandlerNames(): string[] {\n  return customQueryHandlers.names();\n}\n\n/**\n * @deprecated Import {@link Puppeteer} and use the static method\n * {@link Puppeteer.clearCustomQueryHandlers}\n *\n * @public\n */\nexport function clearCustomQueryHandlers(): void {\n  customQueryHandlers.clear();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}