{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from '../common/EventEmitter.js';\n/**\n * BrowserContexts provide a way to operate multiple independent browser\n * sessions. When a browser is launched, it has a single BrowserContext used by\n * default. The method {@link Browser.newPage | Browser.newPage} creates a page\n * in the default browser context.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and\n * will emit various events which are documented in the\n * {@link BrowserContextEmittedEvents} enum.\n *\n * If a page opens another page, e.g. with a `window.open` call, the popup will\n * belong to the parent page's browser context.\n *\n * Puppeteer allows creation of \"incognito\" browser contexts with\n * {@link Browser.createIncognitoBrowserContext | Browser.createIncognitoBrowserContext}\n * method. \"Incognito\" browser contexts don't write any browsing data to disk.\n *\n * @example\n *\n * ```ts\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\nexport class BrowserContext extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets() {\n    throw new Error('Not implemented');\n  }\n  waitForTarget() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  pages() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito() {\n    throw new Error('Not implemented');\n  }\n  overridePermissions() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  clearPermissionOverrides() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser() {\n    throw new Error('Not implemented');\n  }\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  close() {\n    throw new Error('Not implemented');\n  }\n  get id() {\n    return undefined;\n  }\n}","map":{"version":3,"names":["EventEmitter","BrowserContext","constructor","targets","Error","waitForTarget","pages","isIncognito","overridePermissions","clearPermissionOverrides","newPage","browser","close","id","undefined"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/api/BrowserContext.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EventEmitter} from '../common/EventEmitter.js';\n\nimport type {Permission, Browser} from './Browser.js';\nimport {Page} from './Page.js';\nimport type {Target} from './Target.js';\n\n/**\n * BrowserContexts provide a way to operate multiple independent browser\n * sessions. When a browser is launched, it has a single BrowserContext used by\n * default. The method {@link Browser.newPage | Browser.newPage} creates a page\n * in the default browser context.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and\n * will emit various events which are documented in the\n * {@link BrowserContextEmittedEvents} enum.\n *\n * If a page opens another page, e.g. with a `window.open` call, the popup will\n * belong to the parent page's browser context.\n *\n * Puppeteer allows creation of \"incognito\" browser contexts with\n * {@link Browser.createIncognitoBrowserContext | Browser.createIncognitoBrowserContext}\n * method. \"Incognito\" browser contexts don't write any browsing data to disk.\n *\n * @example\n *\n * ```ts\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n *\n * @public\n */\n\nexport class BrowserContext extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * An array of all active targets inside the browser context.\n   */\n  targets(): Target[] {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * This searches for a target in this specific browser context.\n   *\n   * @example\n   * An example of finding a target for a page opened via `window.open`:\n   *\n   * ```ts\n   * await page.evaluate(() => window.open('https://www.example.com/'));\n   * const newWindowTarget = await browserContext.waitForTarget(\n   *   target => target.url() === 'https://www.example.com/'\n   * );\n   * ```\n   *\n   * @param predicate - A function to be run for every target\n   * @param options - An object of options. Accepts a timeout,\n   * which is the maximum wait time in milliseconds.\n   * Pass `0` to disable the timeout. Defaults to 30 seconds.\n   * @returns Promise which resolves to the first target found\n   * that matches the `predicate` function.\n   */\n  waitForTarget(\n    predicate: (x: Target) => boolean | Promise<boolean>,\n    options?: {timeout?: number}\n  ): Promise<Target>;\n  waitForTarget(): Promise<Target> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * An array of all pages inside the browser context.\n   *\n   * @returns Promise which resolves to an array of all open pages.\n   * Non visible pages, such as `\"background_page\"`, will not be listed here.\n   * You can find them using {@link Target.page | the target page}.\n   */\n  pages(): Promise<Page[]> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   *\n   * @remarks\n   * The default browser context cannot be closed.\n   */\n  isIncognito(): boolean {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * await context.overridePermissions('https://html5demos.com', [\n   *   'geolocation',\n   * ]);\n   * ```\n   *\n   * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n   * @param permissions - An array of permissions to grant.\n   * All permissions that are not listed here will be automatically denied.\n   */\n  overridePermissions(origin: string, permissions: Permission[]): Promise<void>;\n  overridePermissions(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Clears all permission overrides for the browser context.\n   *\n   * @example\n   *\n   * ```ts\n   * const context = browser.defaultBrowserContext();\n   * context.overridePermissions('https://example.com', ['clipboard-read']);\n   * // do stuff ..\n   * context.clearPermissionOverrides();\n   * ```\n   */\n  clearPermissionOverrides(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Creates a new page in the browser context.\n   */\n  newPage(): Promise<Page> {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * The browser this browser context belongs to.\n   */\n  browser(): Browser {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Closes the browser context. All the targets that belong to the browser context\n   * will be closed.\n   *\n   * @remarks\n   * Only incognito browser contexts can be closed.\n   */\n  close(): Promise<void> {\n    throw new Error('Not implemented');\n  }\n\n  get id(): string | undefined {\n    return undefined;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAY,QAAO,2BAA2B;AAMtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAM,MAAOC,cAAe,SAAQD,YAAY;EAC9C;;;EAGAE,YAAA;IACE,KAAK,EAAE;EACT;EAEA;;;EAGAC,OAAOA,CAAA;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EA0BAC,aAAaA,CAAA;IACX,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;EAOAE,KAAKA,CAAA;IACH,MAAM,IAAIF,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;EAOAG,WAAWA,CAAA;IACT,MAAM,IAAIH,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAiBAI,mBAAmBA,CAAA;IACjB,MAAM,IAAIJ,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;;;;;;EAYAK,wBAAwBA,CAAA;IACtB,MAAM,IAAIL,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAM,OAAOA,CAAA;IACL,MAAM,IAAIN,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;EAGAO,OAAOA,CAAA;IACL,MAAM,IAAIP,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA;;;;;;;EAOAQ,KAAKA,CAAA;IACH,MAAM,IAAIR,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,IAAIS,EAAEA,CAAA;IACJ,OAAOC,SAAS;EAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}