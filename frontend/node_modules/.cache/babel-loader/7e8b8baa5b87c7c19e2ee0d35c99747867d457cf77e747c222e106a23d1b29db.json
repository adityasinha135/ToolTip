{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Page } from '../api/Page.js';\nimport { assert } from '../util/assert.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { isErrorLike } from '../util/ErrorLike.js';\nimport { Accessibility } from './Accessibility.js';\nimport { Binding } from './Binding.js';\nimport { CDPSessionEmittedEvents, isTargetClosedError } from './Connection.js';\nimport { ConsoleMessage } from './ConsoleMessage.js';\nimport { Coverage } from './Coverage.js';\nimport { CDPDialog } from './Dialog.js';\nimport { EmulationManager } from './EmulationManager.js';\nimport { TargetCloseError } from './Errors.js';\nimport { FileChooser } from './FileChooser.js';\nimport { FrameManager, FrameManagerEmittedEvents } from './FrameManager.js';\nimport { CDPKeyboard, CDPMouse, CDPTouchscreen } from './Input.js';\nimport { MAIN_WORLD } from './IsolatedWorlds.js';\nimport { NetworkManagerEmittedEvents } from './NetworkManager.js';\nimport { TimeoutSettings } from './TimeoutSettings.js';\nimport { Tracing } from './Tracing.js';\nimport { createClientError, createJSHandle, debugError, evaluationString, getReadableAsBuffer, getReadableFromProtocolStream, isString, pageBindingInitString, releaseObject, validateDialogType, valueFromRemoteObject, waitForEvent, waitWithTimeout, withSourcePuppeteerURLIfNone } from './util.js';\nimport { WebWorker } from './WebWorker.js';\n/**\n * @internal\n */\nexport class CDPPage extends Page {\n  /**\n   * @internal\n   */\n  static async _create(client, target, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {\n    const page = new CDPPage(client, target, ignoreHTTPSErrors, screenshotTaskQueue);\n    await page.#initialize();\n    if (defaultViewport) {\n      try {\n        await page.setViewport(defaultViewport);\n      } catch (err) {\n        if (isErrorLike(err) && isTargetClosedError(err)) {\n          debugError(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return page;\n  }\n  #closed = false;\n  #client;\n  #target;\n  #keyboard;\n  #mouse;\n  #timeoutSettings = new TimeoutSettings();\n  #touchscreen;\n  #accessibility;\n  #frameManager;\n  #emulationManager;\n  #tracing;\n  #bindings = new Map();\n  #exposedFunctions = new Map();\n  #coverage;\n  #viewport;\n  #screenshotTaskQueue;\n  #workers = new Map();\n  #fileChooserDeferreds = new Set();\n  #sessionCloseDeferred = Deferred.create();\n  #serviceWorkerBypassed = false;\n  #userDragInterceptionEnabled = false;\n  /**\n   * @internal\n   */\n  constructor(client, target, ignoreHTTPSErrors, screenshotTaskQueue) {\n    super();\n    this.#client = client;\n    this.#target = target;\n    this.#keyboard = new CDPKeyboard(client);\n    this.#mouse = new CDPMouse(client, this.#keyboard);\n    this.#touchscreen = new CDPTouchscreen(client, this.#keyboard);\n    this.#accessibility = new Accessibility(client);\n    this.#frameManager = new FrameManager(client, this, ignoreHTTPSErrors, this.#timeoutSettings);\n    this.#emulationManager = new EmulationManager(client);\n    this.#tracing = new Tracing(client);\n    this.#coverage = new Coverage(client);\n    this.#screenshotTaskQueue = screenshotTaskQueue;\n    this.#viewport = null;\n    this.#target._targetManager().addTargetInterceptor(this.#client, this.#onAttachedToTarget);\n    this.#target._targetManager().on(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, this.#onDetachedFromTarget);\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameAttached, event => {\n      return this.emit(\"frameattached\" /* PageEmittedEvents.FrameAttached */, event);\n    });\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameDetached, event => {\n      return this.emit(\"framedetached\" /* PageEmittedEvents.FrameDetached */, event);\n    });\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameNavigated, event => {\n      return this.emit(\"framenavigated\" /* PageEmittedEvents.FrameNavigated */, event);\n    });\n    const networkManager = this.#frameManager.networkManager;\n    networkManager.on(NetworkManagerEmittedEvents.Request, event => {\n      return this.emit(\"request\" /* PageEmittedEvents.Request */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestServedFromCache, event => {\n      return this.emit(\"requestservedfromcache\" /* PageEmittedEvents.RequestServedFromCache */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.Response, event => {\n      return this.emit(\"response\" /* PageEmittedEvents.Response */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFailed, event => {\n      return this.emit(\"requestfailed\" /* PageEmittedEvents.RequestFailed */, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFinished, event => {\n      return this.emit(\"requestfinished\" /* PageEmittedEvents.RequestFinished */, event);\n    });\n    client.once(CDPSessionEmittedEvents.Disconnected, () => {\n      return this.#sessionCloseDeferred.resolve(new TargetCloseError('Target closed'));\n    });\n    client.on('Page.domContentEventFired', () => {\n      return this.emit(\"domcontentloaded\" /* PageEmittedEvents.DOMContentLoaded */);\n    });\n\n    client.on('Page.loadEventFired', () => {\n      return this.emit(\"load\" /* PageEmittedEvents.Load */);\n    });\n\n    client.on('Runtime.consoleAPICalled', event => {\n      return this.#onConsoleAPI(event);\n    });\n    client.on('Runtime.bindingCalled', event => {\n      return this.#onBindingCalled(event);\n    });\n    client.on('Page.javascriptDialogOpening', event => {\n      return this.#onDialog(event);\n    });\n    client.on('Runtime.exceptionThrown', exception => {\n      return this.#handleException(exception.exceptionDetails);\n    });\n    client.on('Inspector.targetCrashed', () => {\n      return this.#onTargetCrashed();\n    });\n    client.on('Performance.metrics', event => {\n      return this.#emitMetrics(event);\n    });\n    client.on('Log.entryAdded', event => {\n      return this.#onLogEntryAdded(event);\n    });\n    client.on('Page.fileChooserOpened', event => {\n      return this.#onFileChooser(event);\n    });\n    this.#target._isClosedDeferred.valueOrThrow().then(() => {\n      this.#target._targetManager().removeTargetInterceptor(this.#client, this.#onAttachedToTarget);\n      this.#target._targetManager().off(\"targetGone\" /* TargetManagerEmittedEvents.TargetGone */, this.#onDetachedFromTarget);\n      this.emit(\"close\" /* PageEmittedEvents.Close */);\n      this.#closed = true;\n    }).catch(debugError);\n  }\n  #onDetachedFromTarget = target => {\n    const sessionId = target._session()?.id();\n    const worker = this.#workers.get(sessionId);\n    if (!worker) {\n      return;\n    }\n    this.#workers.delete(sessionId);\n    this.emit(\"workerdestroyed\" /* PageEmittedEvents.WorkerDestroyed */, worker);\n  };\n  #onAttachedToTarget = createdTarget => {\n    this.#frameManager.onAttachedToTarget(createdTarget);\n    if (createdTarget._getTargetInfo().type === 'worker') {\n      const session = createdTarget._session();\n      assert(session);\n      const worker = new WebWorker(session, createdTarget.url(), this.#addConsoleMessage.bind(this), this.#handleException.bind(this));\n      this.#workers.set(session.id(), worker);\n      this.emit(\"workercreated\" /* PageEmittedEvents.WorkerCreated */, worker);\n    }\n    if (createdTarget._session()) {\n      this.#target._targetManager().addTargetInterceptor(createdTarget._session(), this.#onAttachedToTarget);\n    }\n  };\n  async #initialize() {\n    try {\n      await Promise.all([this.#frameManager.initialize(), this.#client.send('Performance.enable'), this.#client.send('Log.enable')]);\n    } catch (err) {\n      if (isErrorLike(err) && isTargetClosedError(err)) {\n        debugError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n  async #onFileChooser(event) {\n    if (!this.#fileChooserDeferreds.size) {\n      return;\n    }\n    const frame = this.#frameManager.frame(event.frameId);\n    assert(frame, 'This should never happen.');\n    // This is guaranteed to be an HTMLInputElement handle by the event.\n    const handle = await frame.worlds[MAIN_WORLD].adoptBackendNode(event.backendNodeId);\n    const fileChooser = new FileChooser(handle, event);\n    for (const promise of this.#fileChooserDeferreds) {\n      promise.resolve(fileChooser);\n    }\n    this.#fileChooserDeferreds.clear();\n  }\n  /**\n   * @internal\n   */\n  _client() {\n    return this.#client;\n  }\n  isServiceWorkerBypassed() {\n    return this.#serviceWorkerBypassed;\n  }\n  isDragInterceptionEnabled() {\n    return this.#userDragInterceptionEnabled;\n  }\n  isJavaScriptEnabled() {\n    return this.#emulationManager.javascriptEnabled;\n  }\n  waitForFileChooser(options = {}) {\n    const needsEnable = this.#fileChooserDeferreds.size === 0;\n    const {\n      timeout = this.#timeoutSettings.timeout()\n    } = options;\n    const deferred = Deferred.create({\n      message: `Waiting for \\`FileChooser\\` failed: ${timeout}ms exceeded`,\n      timeout\n    });\n    this.#fileChooserDeferreds.add(deferred);\n    let enablePromise;\n    if (needsEnable) {\n      enablePromise = this.#client.send('Page.setInterceptFileChooserDialog', {\n        enabled: true\n      });\n    }\n    return Promise.all([deferred.valueOrThrow(), enablePromise]).then(([result]) => {\n      return result;\n    }).catch(error => {\n      this.#fileChooserDeferreds.delete(deferred);\n      throw error;\n    });\n  }\n  async setGeolocation(options) {\n    return await this.#emulationManager.setGeolocation(options);\n  }\n  target() {\n    return this.#target;\n  }\n  browser() {\n    return this.#target.browser();\n  }\n  browserContext() {\n    return this.#target.browserContext();\n  }\n  #onTargetCrashed() {\n    this.emit('error', new Error('Page crashed!'));\n  }\n  #onLogEntryAdded(event) {\n    const {\n      level,\n      text,\n      args,\n      source,\n      url,\n      lineNumber\n    } = event.entry;\n    if (args) {\n      args.map(arg => {\n        return releaseObject(this.#client, arg);\n      });\n    }\n    if (source !== 'worker') {\n      this.emit(\"console\" /* PageEmittedEvents.Console */, new ConsoleMessage(level, text, [], [{\n        url,\n        lineNumber\n      }]));\n    }\n  }\n  mainFrame() {\n    return this.#frameManager.mainFrame();\n  }\n  get keyboard() {\n    return this.#keyboard;\n  }\n  get touchscreen() {\n    return this.#touchscreen;\n  }\n  get coverage() {\n    return this.#coverage;\n  }\n  get tracing() {\n    return this.#tracing;\n  }\n  get accessibility() {\n    return this.#accessibility;\n  }\n  frames() {\n    return this.#frameManager.frames();\n  }\n  workers() {\n    return Array.from(this.#workers.values());\n  }\n  async setRequestInterception(value) {\n    return this.#frameManager.networkManager.setRequestInterception(value);\n  }\n  async setBypassServiceWorker(bypass) {\n    this.#serviceWorkerBypassed = bypass;\n    return this.#client.send('Network.setBypassServiceWorker', {\n      bypass\n    });\n  }\n  async setDragInterception(enabled) {\n    this.#userDragInterceptionEnabled = enabled;\n    return this.#client.send('Input.setInterceptDrags', {\n      enabled\n    });\n  }\n  setOfflineMode(enabled) {\n    return this.#frameManager.networkManager.setOfflineMode(enabled);\n  }\n  emulateNetworkConditions(networkConditions) {\n    return this.#frameManager.networkManager.emulateNetworkConditions(networkConditions);\n  }\n  setDefaultNavigationTimeout(timeout) {\n    this.#timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n  setDefaultTimeout(timeout) {\n    this.#timeoutSettings.setDefaultTimeout(timeout);\n  }\n  getDefaultTimeout() {\n    return this.#timeoutSettings.timeout();\n  }\n  async evaluateHandle(pageFunction, ...args) {\n    pageFunction = withSourcePuppeteerURLIfNone(this.evaluateHandle.name, pageFunction);\n    const context = await this.mainFrame().executionContext();\n    return context.evaluateHandle(pageFunction, ...args);\n  }\n  async queryObjects(prototypeHandle) {\n    const context = await this.mainFrame().executionContext();\n    assert(!prototypeHandle.disposed, 'Prototype JSHandle is disposed!');\n    assert(prototypeHandle.id, 'Prototype JSHandle must not be referencing primitive value');\n    const response = await context._client.send('Runtime.queryObjects', {\n      prototypeObjectId: prototypeHandle.id\n    });\n    return createJSHandle(context, response.objects);\n  }\n  async cookies(...urls) {\n    const originalCookies = (await this.#client.send('Network.getCookies', {\n      urls: urls.length ? urls : [this.url()]\n    })).cookies;\n    const unsupportedCookieAttributes = ['priority'];\n    const filterUnsupportedAttributes = cookie => {\n      for (const attr of unsupportedCookieAttributes) {\n        delete cookie[attr];\n      }\n      return cookie;\n    };\n    return originalCookies.map(filterUnsupportedAttributes);\n  }\n  async deleteCookie(...cookies) {\n    const pageURL = this.url();\n    for (const cookie of cookies) {\n      const item = Object.assign({}, cookie);\n      if (!cookie.url && pageURL.startsWith('http')) {\n        item.url = pageURL;\n      }\n      await this.#client.send('Network.deleteCookies', item);\n    }\n  }\n  async setCookie(...cookies) {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) {\n        item.url = pageURL;\n      }\n      assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n      assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) {\n      await this.#client.send('Network.setCookies', {\n        cookies: items\n      });\n    }\n  }\n  async exposeFunction(name, pptrFunction) {\n    if (this.#bindings.has(name)) {\n      throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n    }\n    let binding;\n    switch (typeof pptrFunction) {\n      case 'function':\n        binding = new Binding(name, pptrFunction);\n        break;\n      default:\n        binding = new Binding(name, pptrFunction.default);\n        break;\n    }\n    this.#bindings.set(name, binding);\n    const expression = pageBindingInitString('exposedFun', name);\n    await this.#client.send('Runtime.addBinding', {\n      name\n    });\n    const {\n      identifier\n    } = await this.#client.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: expression\n    });\n    this.#exposedFunctions.set(name, identifier);\n    await Promise.all(this.frames().map(frame => {\n      return frame.evaluate(expression).catch(debugError);\n    }));\n  }\n  async removeExposedFunction(name) {\n    const exposedFun = this.#exposedFunctions.get(name);\n    if (!exposedFun) {\n      throw new Error(`Failed to remove page binding with name ${name}: window['${name}'] does not exists!`);\n    }\n    await this.#client.send('Runtime.removeBinding', {\n      name\n    });\n    await this.removeScriptToEvaluateOnNewDocument(exposedFun);\n    await Promise.all(this.frames().map(frame => {\n      return frame.evaluate(name => {\n        // Removes the dangling Puppeteer binding wrapper.\n        // @ts-expect-error: In a different context.\n        globalThis[name] = undefined;\n      }, name).catch(debugError);\n    }));\n    this.#exposedFunctions.delete(name);\n    this.#bindings.delete(name);\n  }\n  async authenticate(credentials) {\n    return this.#frameManager.networkManager.authenticate(credentials);\n  }\n  async setExtraHTTPHeaders(headers) {\n    return this.#frameManager.networkManager.setExtraHTTPHeaders(headers);\n  }\n  async setUserAgent(userAgent, userAgentMetadata) {\n    return this.#frameManager.networkManager.setUserAgent(userAgent, userAgentMetadata);\n  }\n  async metrics() {\n    const response = await this.#client.send('Performance.getMetrics');\n    return this.#buildMetricsObject(response.metrics);\n  }\n  #emitMetrics(event) {\n    this.emit(\"metrics\" /* PageEmittedEvents.Metrics */, {\n      title: event.title,\n      metrics: this.#buildMetricsObject(event.metrics)\n    });\n  }\n  #buildMetricsObject(metrics) {\n    const result = {};\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) {\n        result[metric.name] = metric.value;\n      }\n    }\n    return result;\n  }\n  #handleException(exceptionDetails) {\n    this.emit(\"pageerror\" /* PageEmittedEvents.PageError */, createClientError(exceptionDetails));\n  }\n  async #onConsoleAPI(event) {\n    if (event.executionContextId === 0) {\n      // DevTools protocol stores the last 1000 console messages. These\n      // messages are always reported even for removed execution contexts. In\n      // this case, they are marked with executionContextId = 0 and are\n      // reported upon enabling Runtime agent.\n      //\n      // Ignore these messages since:\n      // - there's no execution context we can use to operate with message\n      //   arguments\n      // - these messages are reported before Puppeteer clients can subscribe\n      //   to the 'console'\n      //   page event.\n      //\n      // @see https://github.com/puppeteer/puppeteer/issues/3865\n      return;\n    }\n    const context = this.#frameManager.getExecutionContextById(event.executionContextId, this.#client);\n    if (!context) {\n      debugError(new Error(`ExecutionContext not found for a console message: ${JSON.stringify(event)}`));\n      return;\n    }\n    const values = event.args.map(arg => {\n      return createJSHandle(context, arg);\n    });\n    this.#addConsoleMessage(event.type, values, event.stackTrace);\n  }\n  async #onBindingCalled(event) {\n    let payload;\n    try {\n      payload = JSON.parse(event.payload);\n    } catch {\n      // The binding was either called by something in the page or it was\n      // called before our wrapper was initialized.\n      return;\n    }\n    const {\n      type,\n      name,\n      seq,\n      args,\n      isTrivial\n    } = payload;\n    if (type !== 'exposedFun') {\n      return;\n    }\n    const context = this.#frameManager.executionContextById(event.executionContextId, this.#client);\n    if (!context) {\n      return;\n    }\n    const binding = this.#bindings.get(name);\n    await binding?.run(context, seq, args, isTrivial);\n  }\n  #addConsoleMessage(eventType, args, stackTrace) {\n    if (!this.listenerCount(\"console\" /* PageEmittedEvents.Console */)) {\n      args.forEach(arg => {\n        return arg.dispose();\n      });\n      return;\n    }\n    const textTokens = [];\n    for (const arg of args) {\n      const remoteObject = arg.remoteObject();\n      if (remoteObject.objectId) {\n        textTokens.push(arg.toString());\n      } else {\n        textTokens.push(valueFromRemoteObject(remoteObject));\n      }\n    }\n    const stackTraceLocations = [];\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber\n        });\n      }\n    }\n    const message = new ConsoleMessage(eventType, textTokens.join(' '), args, stackTraceLocations);\n    this.emit(\"console\" /* PageEmittedEvents.Console */, message);\n  }\n  #onDialog(event) {\n    const type = validateDialogType(event.type);\n    const dialog = new CDPDialog(this.#client, type, event.message, event.defaultPrompt);\n    this.emit(\"dialog\" /* PageEmittedEvents.Dialog */, dialog);\n  }\n  url() {\n    return this.mainFrame().url();\n  }\n  async content() {\n    return await this.mainFrame().content();\n  }\n  async setContent(html, options = {}) {\n    await this.mainFrame().setContent(html, options);\n  }\n  async goto(url, options = {}) {\n    return await this.mainFrame().goto(url, options);\n  }\n  async reload(options) {\n    const result = await Promise.all([this.waitForNavigation(options), this.#client.send('Page.reload')]);\n    return result[0];\n  }\n  async createCDPSession() {\n    return await this.target().createCDPSession();\n  }\n  async waitForRequest(urlOrPredicate, options = {}) {\n    const {\n      timeout = this.#timeoutSettings.timeout()\n    } = options;\n    return waitForEvent(this.#frameManager.networkManager, NetworkManagerEmittedEvents.Request, async request => {\n      if (isString(urlOrPredicate)) {\n        return urlOrPredicate === request.url();\n      }\n      if (typeof urlOrPredicate === 'function') {\n        return !!(await urlOrPredicate(request));\n      }\n      return false;\n    }, timeout, this.#sessionCloseDeferred.valueOrThrow());\n  }\n  async waitForResponse(urlOrPredicate, options = {}) {\n    const {\n      timeout = this.#timeoutSettings.timeout()\n    } = options;\n    return waitForEvent(this.#frameManager.networkManager, NetworkManagerEmittedEvents.Response, async response => {\n      if (isString(urlOrPredicate)) {\n        return urlOrPredicate === response.url();\n      }\n      if (typeof urlOrPredicate === 'function') {\n        return !!(await urlOrPredicate(response));\n      }\n      return false;\n    }, timeout, this.#sessionCloseDeferred.valueOrThrow());\n  }\n  async waitForNetworkIdle(options = {}) {\n    const {\n      idleTime = 500,\n      timeout = this.#timeoutSettings.timeout()\n    } = options;\n    await this._waitForNetworkIdle(this.#frameManager.networkManager, idleTime, timeout, this.#sessionCloseDeferred);\n  }\n  async waitForFrame(urlOrPredicate, options = {}) {\n    const {\n      timeout = this.#timeoutSettings.timeout()\n    } = options;\n    let predicate;\n    if (isString(urlOrPredicate)) {\n      predicate = frame => {\n        return Promise.resolve(urlOrPredicate === frame.url());\n      };\n    } else {\n      predicate = frame => {\n        const value = urlOrPredicate(frame);\n        if (typeof value === 'boolean') {\n          return Promise.resolve(value);\n        }\n        return value;\n      };\n    }\n    const eventRace = Deferred.race([waitForEvent(this.#frameManager, FrameManagerEmittedEvents.FrameAttached, predicate, timeout, this.#sessionCloseDeferred.valueOrThrow()), waitForEvent(this.#frameManager, FrameManagerEmittedEvents.FrameNavigated, predicate, timeout, this.#sessionCloseDeferred.valueOrThrow()), ...this.frames().map(async frame => {\n      if (await predicate(frame)) {\n        return frame;\n      }\n      return await eventRace;\n    })]);\n    return eventRace;\n  }\n  async goBack(options = {}) {\n    return this.#go(-1, options);\n  }\n  async goForward(options = {}) {\n    return this.#go(+1, options);\n  }\n  async #go(delta, options) {\n    const history = await this.#client.send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) {\n      return null;\n    }\n    const result = await Promise.all([this.waitForNavigation(options), this.#client.send('Page.navigateToHistoryEntry', {\n      entryId: entry.id\n    })]);\n    return result[0];\n  }\n  async bringToFront() {\n    await this.#client.send('Page.bringToFront');\n  }\n  async setJavaScriptEnabled(enabled) {\n    return await this.#emulationManager.setJavaScriptEnabled(enabled);\n  }\n  async setBypassCSP(enabled) {\n    await this.#client.send('Page.setBypassCSP', {\n      enabled\n    });\n  }\n  async emulateMediaType(type) {\n    return await this.#emulationManager.emulateMediaType(type);\n  }\n  async emulateCPUThrottling(factor) {\n    return await this.#emulationManager.emulateCPUThrottling(factor);\n  }\n  async emulateMediaFeatures(features) {\n    return await this.#emulationManager.emulateMediaFeatures(features);\n  }\n  async emulateTimezone(timezoneId) {\n    return await this.#emulationManager.emulateTimezone(timezoneId);\n  }\n  async emulateIdleState(overrides) {\n    return await this.#emulationManager.emulateIdleState(overrides);\n  }\n  async emulateVisionDeficiency(type) {\n    return await this.#emulationManager.emulateVisionDeficiency(type);\n  }\n  async setViewport(viewport) {\n    const needsReload = await this.#emulationManager.emulateViewport(viewport);\n    this.#viewport = viewport;\n    if (needsReload) {\n      await this.reload();\n    }\n  }\n  viewport() {\n    return this.#viewport;\n  }\n  async evaluate(pageFunction, ...args) {\n    pageFunction = withSourcePuppeteerURLIfNone(this.evaluate.name, pageFunction);\n    return this.mainFrame().evaluate(pageFunction, ...args);\n  }\n  async evaluateOnNewDocument(pageFunction, ...args) {\n    const source = evaluationString(pageFunction, ...args);\n    const {\n      identifier\n    } = await this.#client.send('Page.addScriptToEvaluateOnNewDocument', {\n      source\n    });\n    return {\n      identifier\n    };\n  }\n  async removeScriptToEvaluateOnNewDocument(identifier) {\n    await this.#client.send('Page.removeScriptToEvaluateOnNewDocument', {\n      identifier\n    });\n  }\n  async setCacheEnabled(enabled = true) {\n    await this.#frameManager.networkManager.setCacheEnabled(enabled);\n  }\n  async screenshot(options = {}) {\n    let screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n    // options.type takes precedence over inferring the type from options.path\n    // because it may be a 0-length file with no extension created beforehand\n    // (i.e. as a temp file).\n    if (options.type) {\n      screenshotType = options.type;\n    } else if (options.path) {\n      const filePath = options.path;\n      const extension = filePath.slice(filePath.lastIndexOf('.') + 1).toLowerCase();\n      switch (extension) {\n        case 'png':\n          screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n          break;\n        case 'jpeg':\n        case 'jpg':\n          screenshotType = \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */;\n          break;\n        case 'webp':\n          screenshotType = \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */;\n          break;\n        default:\n          throw new Error(`Unsupported screenshot type for extension \\`.${extension}\\``);\n      }\n    }\n    if (options.quality) {\n      assert(screenshotType === \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */ || screenshotType === \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */, 'options.quality is unsupported for the ' + screenshotType + ' screenshots');\n      assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + typeof options.quality);\n      assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n      assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);\n    }\n    assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n    if (options.clip) {\n      assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + typeof options.clip.x);\n      assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + typeof options.clip.y);\n      assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + typeof options.clip.width);\n      assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + typeof options.clip.height);\n      assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n      assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n    }\n    return this.#screenshotTaskQueue.postTask(() => {\n      return this.#screenshotTask(screenshotType, options);\n    });\n  }\n  async #screenshotTask(format, options = {}) {\n    await this.#client.send('Target.activateTarget', {\n      targetId: this.#target._targetId\n    });\n    let clip = options.clip ? processClip(options.clip) : undefined;\n    let captureBeyondViewport = options.captureBeyondViewport ?? true;\n    const fromSurface = options.fromSurface;\n    if (options.fullPage) {\n      // Overwrite clip for full page.\n      clip = undefined;\n      if (!captureBeyondViewport) {\n        const metrics = await this.#client.send('Page.getLayoutMetrics');\n        // Fallback to `contentSize` in case of using Firefox.\n        const {\n          width,\n          height\n        } = metrics.cssContentSize || metrics.contentSize;\n        const {\n          isMobile = false,\n          deviceScaleFactor = 1,\n          isLandscape = false\n        } = this.#viewport || {};\n        const screenOrientation = isLandscape ? {\n          angle: 90,\n          type: 'landscapePrimary'\n        } : {\n          angle: 0,\n          type: 'portraitPrimary'\n        };\n        await this.#client.send('Emulation.setDeviceMetricsOverride', {\n          mobile: isMobile,\n          width,\n          height,\n          deviceScaleFactor,\n          screenOrientation\n        });\n      }\n    } else if (!clip) {\n      captureBeyondViewport = false;\n    }\n    const shouldSetDefaultBackground = options.omitBackground && (format === 'png' || format === 'webp');\n    if (shouldSetDefaultBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n    const result = await this.#client.send('Page.captureScreenshot', {\n      format,\n      optimizeForSpeed: options.optimizeForSpeed,\n      quality: options.quality,\n      clip: clip && {\n        ...clip,\n        scale: clip.scale ?? 1\n      },\n      captureBeyondViewport,\n      fromSurface\n    });\n    if (shouldSetDefaultBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n    if (options.fullPage && this.#viewport) {\n      await this.setViewport(this.#viewport);\n    }\n    if (options.encoding === 'base64') {\n      return result.data;\n    }\n    const buffer = Buffer.from(result.data, 'base64');\n    await this._maybeWriteBufferToFile(options.path, buffer);\n    return buffer;\n    function processClip(clip) {\n      const x = Math.round(clip.x);\n      const y = Math.round(clip.y);\n      const width = Math.round(clip.width + clip.x - x);\n      const height = Math.round(clip.height + clip.y - y);\n      return {\n        x,\n        y,\n        width,\n        height,\n        scale: clip.scale\n      };\n    }\n  }\n  async createPDFStream(options = {}) {\n    const {\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      width: paperWidth,\n      height: paperHeight,\n      margin,\n      pageRanges,\n      preferCSSPageSize,\n      omitBackground,\n      timeout\n    } = this._getPDFOptions(options);\n    if (omitBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n    const printCommandPromise = this.#client.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop: margin.top,\n      marginBottom: margin.bottom,\n      marginLeft: margin.left,\n      marginRight: margin.right,\n      pageRanges,\n      preferCSSPageSize\n    });\n    const result = await waitWithTimeout(printCommandPromise, 'Page.printToPDF', timeout);\n    if (omitBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n    assert(result.stream, '`stream` is missing from `Page.printToPDF');\n    return getReadableFromProtocolStream(this.#client, result.stream);\n  }\n  async pdf(options = {}) {\n    const {\n      path = undefined\n    } = options;\n    const readable = await this.createPDFStream(options);\n    const buffer = await getReadableAsBuffer(readable, path);\n    assert(buffer, 'Could not create buffer');\n    return buffer;\n  }\n  async title() {\n    return this.mainFrame().title();\n  }\n  async close(options = {\n    runBeforeUnload: undefined\n  }) {\n    const connection = this.#client.connection();\n    assert(connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n    const runBeforeUnload = !!options.runBeforeUnload;\n    if (runBeforeUnload) {\n      await this.#client.send('Page.close');\n    } else {\n      await connection.send('Target.closeTarget', {\n        targetId: this.#target._targetId\n      });\n      await this.#target._isClosedDeferred.valueOrThrow();\n    }\n  }\n  isClosed() {\n    return this.#closed;\n  }\n  get mouse() {\n    return this.#mouse;\n  }\n  /**\n   * This method is typically coupled with an action that triggers a device\n   * request from an api such as WebBluetooth.\n   *\n   * :::caution\n   *\n   * This must be called before the device request is made. It will not return a\n   * currently active device prompt.\n   *\n   * :::\n   *\n   * @example\n   *\n   * ```ts\n   * const [devicePrompt] = Promise.all([\n   *   page.waitForDevicePrompt(),\n   *   page.click('#connect-bluetooth'),\n   * ]);\n   * await devicePrompt.select(\n   *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))\n   * );\n   * ```\n   */\n  waitForDevicePrompt(options = {}) {\n    return this.mainFrame().waitForDevicePrompt(options);\n  }\n}\nconst supportedMetrics = new Set(['Timestamp', 'Documents', 'Frames', 'JSEventListeners', 'Nodes', 'LayoutCount', 'RecalcStyleCount', 'LayoutDuration', 'RecalcStyleDuration', 'ScriptDuration', 'TaskDuration', 'JSHeapUsedSize', 'JSHeapTotalSize']);","map":{"version":3,"names":["Page","assert","Deferred","isErrorLike","Accessibility","Binding","CDPSessionEmittedEvents","isTargetClosedError","ConsoleMessage","Coverage","CDPDialog","EmulationManager","TargetCloseError","FileChooser","FrameManager","FrameManagerEmittedEvents","CDPKeyboard","CDPMouse","CDPTouchscreen","MAIN_WORLD","NetworkManagerEmittedEvents","TimeoutSettings","Tracing","createClientError","createJSHandle","debugError","evaluationString","getReadableAsBuffer","getReadableFromProtocolStream","isString","pageBindingInitString","releaseObject","validateDialogType","valueFromRemoteObject","waitForEvent","waitWithTimeout","withSourcePuppeteerURLIfNone","WebWorker","CDPPage","_create","client","target","ignoreHTTPSErrors","defaultViewport","screenshotTaskQueue","page","initialize","setViewport","err","closed","keyboard","mouse","timeoutSettings","touchscreen","accessibility","frameManager","emulationManager","tracing","bindings","Map","exposedFunctions","coverage","viewport","workers","fileChooserDeferreds","Set","sessionCloseDeferred","create","serviceWorkerBypassed","userDragInterceptionEnabled","constructor","_targetManager","addTargetInterceptor","onAttachedToTarget","on","onDetachedFromTarget","FrameAttached","event","emit","FrameDetached","FrameNavigated","networkManager","Request","RequestServedFromCache","Response","RequestFailed","RequestFinished","once","Disconnected","resolve","onConsoleAPI","onBindingCalled","onDialog","exception","handleException","exceptionDetails","onTargetCrashed","emitMetrics","onLogEntryAdded","onFileChooser","_isClosedDeferred","valueOrThrow","then","removeTargetInterceptor","off","catch","sessionId","_session","id","worker","get","delete","createdTarget","_getTargetInfo","type","session","url","addConsoleMessage","bind","set","#initialize","Promise","all","send","#onFileChooser","size","frame","frameId","handle","worlds","adoptBackendNode","backendNodeId","fileChooser","promise","clear","_client","isServiceWorkerBypassed","isDragInterceptionEnabled","isJavaScriptEnabled","javascriptEnabled","waitForFileChooser","options","needsEnable","timeout","deferred","message","add","enablePromise","enabled","result","error","setGeolocation","browser","browserContext","#onTargetCrashed","Error","#onLogEntryAdded","level","text","args","source","lineNumber","entry","map","arg","mainFrame","frames","Array","from","values","setRequestInterception","value","setBypassServiceWorker","bypass","setDragInterception","setOfflineMode","emulateNetworkConditions","networkConditions","setDefaultNavigationTimeout","setDefaultTimeout","getDefaultTimeout","evaluateHandle","pageFunction","name","context","executionContext","queryObjects","prototypeHandle","disposed","response","prototypeObjectId","objects","cookies","urls","originalCookies","length","unsupportedCookieAttributes","filterUnsupportedAttributes","cookie","attr","deleteCookie","pageURL","item","Object","assign","startsWith","setCookie","startsWithHTTP","items","String","prototype","call","exposeFunction","pptrFunction","has","binding","default","expression","identifier","evaluate","removeExposedFunction","exposedFun","removeScriptToEvaluateOnNewDocument","globalThis","undefined","authenticate","credentials","setExtraHTTPHeaders","headers","setUserAgent","userAgent","userAgentMetadata","metrics","buildMetricsObject","#emitMetrics","title","#buildMetricsObject","metric","supportedMetrics","#handleException","#onConsoleAPI","executionContextId","getExecutionContextById","JSON","stringify","stackTrace","#onBindingCalled","payload","parse","seq","isTrivial","executionContextById","run","#addConsoleMessage","eventType","listenerCount","forEach","dispose","textTokens","remoteObject","objectId","push","toString","stackTraceLocations","callFrame","callFrames","columnNumber","join","#onDialog","dialog","defaultPrompt","content","setContent","html","goto","reload","waitForNavigation","createCDPSession","waitForRequest","urlOrPredicate","request","waitForResponse","waitForNetworkIdle","idleTime","_waitForNetworkIdle","waitForFrame","predicate","eventRace","race","goBack","go","goForward","#go","delta","history","entries","currentIndex","entryId","bringToFront","setJavaScriptEnabled","setBypassCSP","emulateMediaType","emulateCPUThrottling","factor","emulateMediaFeatures","features","emulateTimezone","timezoneId","emulateIdleState","overrides","emulateVisionDeficiency","needsReload","emulateViewport","evaluateOnNewDocument","setCacheEnabled","screenshot","screenshotType","path","filePath","extension","slice","lastIndexOf","toLowerCase","quality","Number","isInteger","clip","fullPage","x","y","width","height","postTask","screenshotTask","#screenshotTask","format","targetId","_targetId","processClip","captureBeyondViewport","fromSurface","cssContentSize","contentSize","isMobile","deviceScaleFactor","isLandscape","screenOrientation","angle","mobile","shouldSetDefaultBackground","omitBackground","setTransparentBackgroundColor","optimizeForSpeed","scale","resetDefaultBackgroundColor","encoding","data","buffer","Buffer","_maybeWriteBufferToFile","Math","round","createPDFStream","landscape","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","paperWidth","paperHeight","margin","pageRanges","preferCSSPageSize","_getPDFOptions","printCommandPromise","transferMode","marginTop","top","marginBottom","bottom","marginLeft","left","marginRight","right","stream","pdf","readable","close","runBeforeUnload","connection","isClosed","waitForDevicePrompt"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/Page.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {Readable} from 'stream';\n\nimport {Protocol} from 'devtools-protocol';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport {ElementHandle} from '../api/ElementHandle.js';\nimport {Frame} from '../api/Frame.js';\nimport {HTTPRequest} from '../api/HTTPRequest.js';\nimport {HTTPResponse} from '../api/HTTPResponse.js';\nimport {JSHandle} from '../api/JSHandle.js';\nimport {\n  GeolocationOptions,\n  MediaFeature,\n  Metrics,\n  NewDocumentScriptEvaluation,\n  Page,\n  PageEmittedEvents,\n  ScreenshotClip,\n  ScreenshotOptions,\n  WaitForOptions,\n  WaitTimeoutOptions,\n} from '../api/Page.js';\nimport {assert} from '../util/assert.js';\nimport {Deferred} from '../util/Deferred.js';\nimport {isErrorLike} from '../util/ErrorLike.js';\n\nimport {Accessibility} from './Accessibility.js';\nimport {Binding} from './Binding.js';\nimport {\n  CDPSession,\n  CDPSessionEmittedEvents,\n  isTargetClosedError,\n} from './Connection.js';\nimport {ConsoleMessage, ConsoleMessageType} from './ConsoleMessage.js';\nimport {Coverage} from './Coverage.js';\nimport {DeviceRequestPrompt} from './DeviceRequestPrompt.js';\nimport {CDPDialog} from './Dialog.js';\nimport {EmulationManager} from './EmulationManager.js';\nimport {TargetCloseError} from './Errors.js';\nimport {FileChooser} from './FileChooser.js';\nimport {FrameManager, FrameManagerEmittedEvents} from './FrameManager.js';\nimport {CDPKeyboard, CDPMouse, CDPTouchscreen} from './Input.js';\nimport {MAIN_WORLD} from './IsolatedWorlds.js';\nimport {\n  Credentials,\n  NetworkConditions,\n  NetworkManagerEmittedEvents,\n} from './NetworkManager.js';\nimport {PDFOptions} from './PDFOptions.js';\nimport {Viewport} from './PuppeteerViewport.js';\nimport {CDPTarget} from './Target.js';\nimport {TargetManagerEmittedEvents} from './TargetManager.js';\nimport {TaskQueue} from './TaskQueue.js';\nimport {TimeoutSettings} from './TimeoutSettings.js';\nimport {Tracing} from './Tracing.js';\nimport {BindingPayload, EvaluateFunc, HandleFor} from './types.js';\nimport {\n  createClientError,\n  createJSHandle,\n  debugError,\n  evaluationString,\n  getReadableAsBuffer,\n  getReadableFromProtocolStream,\n  isString,\n  pageBindingInitString,\n  releaseObject,\n  validateDialogType,\n  valueFromRemoteObject,\n  waitForEvent,\n  waitWithTimeout,\n  withSourcePuppeteerURLIfNone,\n} from './util.js';\nimport {WebWorker} from './WebWorker.js';\n\n/**\n * @internal\n */\nexport class CDPPage extends Page {\n  /**\n   * @internal\n   */\n  static async _create(\n    client: CDPSession,\n    target: CDPTarget,\n    ignoreHTTPSErrors: boolean,\n    defaultViewport: Viewport | null,\n    screenshotTaskQueue: TaskQueue\n  ): Promise<CDPPage> {\n    const page = new CDPPage(\n      client,\n      target,\n      ignoreHTTPSErrors,\n      screenshotTaskQueue\n    );\n    await page.#initialize();\n    if (defaultViewport) {\n      try {\n        await page.setViewport(defaultViewport);\n      } catch (err) {\n        if (isErrorLike(err) && isTargetClosedError(err)) {\n          debugError(err);\n        } else {\n          throw err;\n        }\n      }\n    }\n    return page;\n  }\n\n  #closed = false;\n  #client: CDPSession;\n  #target: CDPTarget;\n  #keyboard: CDPKeyboard;\n  #mouse: CDPMouse;\n  #timeoutSettings = new TimeoutSettings();\n  #touchscreen: CDPTouchscreen;\n  #accessibility: Accessibility;\n  #frameManager: FrameManager;\n  #emulationManager: EmulationManager;\n  #tracing: Tracing;\n  #bindings = new Map<string, Binding>();\n  #exposedFunctions = new Map<string, string>();\n  #coverage: Coverage;\n  #viewport: Viewport | null;\n  #screenshotTaskQueue: TaskQueue;\n  #workers = new Map<string, WebWorker>();\n  #fileChooserDeferreds = new Set<Deferred<FileChooser>>();\n  #sessionCloseDeferred = Deferred.create<TargetCloseError>();\n  #serviceWorkerBypassed = false;\n  #userDragInterceptionEnabled = false;\n\n  /**\n   * @internal\n   */\n  constructor(\n    client: CDPSession,\n    target: CDPTarget,\n    ignoreHTTPSErrors: boolean,\n    screenshotTaskQueue: TaskQueue\n  ) {\n    super();\n    this.#client = client;\n    this.#target = target;\n    this.#keyboard = new CDPKeyboard(client);\n    this.#mouse = new CDPMouse(client, this.#keyboard);\n    this.#touchscreen = new CDPTouchscreen(client, this.#keyboard);\n    this.#accessibility = new Accessibility(client);\n    this.#frameManager = new FrameManager(\n      client,\n      this,\n      ignoreHTTPSErrors,\n      this.#timeoutSettings\n    );\n    this.#emulationManager = new EmulationManager(client);\n    this.#tracing = new Tracing(client);\n    this.#coverage = new Coverage(client);\n    this.#screenshotTaskQueue = screenshotTaskQueue;\n    this.#viewport = null;\n\n    this.#target\n      ._targetManager()\n      .addTargetInterceptor(this.#client, this.#onAttachedToTarget);\n\n    this.#target\n      ._targetManager()\n      .on(TargetManagerEmittedEvents.TargetGone, this.#onDetachedFromTarget);\n\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameAttached, event => {\n      return this.emit(PageEmittedEvents.FrameAttached, event);\n    });\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameDetached, event => {\n      return this.emit(PageEmittedEvents.FrameDetached, event);\n    });\n    this.#frameManager.on(FrameManagerEmittedEvents.FrameNavigated, event => {\n      return this.emit(PageEmittedEvents.FrameNavigated, event);\n    });\n\n    const networkManager = this.#frameManager.networkManager;\n    networkManager.on(NetworkManagerEmittedEvents.Request, event => {\n      return this.emit(PageEmittedEvents.Request, event);\n    });\n    networkManager.on(\n      NetworkManagerEmittedEvents.RequestServedFromCache,\n      event => {\n        return this.emit(PageEmittedEvents.RequestServedFromCache, event);\n      }\n    );\n    networkManager.on(NetworkManagerEmittedEvents.Response, event => {\n      return this.emit(PageEmittedEvents.Response, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFailed, event => {\n      return this.emit(PageEmittedEvents.RequestFailed, event);\n    });\n    networkManager.on(NetworkManagerEmittedEvents.RequestFinished, event => {\n      return this.emit(PageEmittedEvents.RequestFinished, event);\n    });\n\n    client.once(CDPSessionEmittedEvents.Disconnected, () => {\n      return this.#sessionCloseDeferred.resolve(\n        new TargetCloseError('Target closed')\n      );\n    });\n\n    client.on('Page.domContentEventFired', () => {\n      return this.emit(PageEmittedEvents.DOMContentLoaded);\n    });\n    client.on('Page.loadEventFired', () => {\n      return this.emit(PageEmittedEvents.Load);\n    });\n    client.on('Runtime.consoleAPICalled', event => {\n      return this.#onConsoleAPI(event);\n    });\n    client.on('Runtime.bindingCalled', event => {\n      return this.#onBindingCalled(event);\n    });\n    client.on('Page.javascriptDialogOpening', event => {\n      return this.#onDialog(event);\n    });\n    client.on('Runtime.exceptionThrown', exception => {\n      return this.#handleException(exception.exceptionDetails);\n    });\n    client.on('Inspector.targetCrashed', () => {\n      return this.#onTargetCrashed();\n    });\n    client.on('Performance.metrics', event => {\n      return this.#emitMetrics(event);\n    });\n    client.on('Log.entryAdded', event => {\n      return this.#onLogEntryAdded(event);\n    });\n    client.on('Page.fileChooserOpened', event => {\n      return this.#onFileChooser(event);\n    });\n    this.#target._isClosedDeferred\n      .valueOrThrow()\n      .then(() => {\n        this.#target\n          ._targetManager()\n          .removeTargetInterceptor(this.#client, this.#onAttachedToTarget);\n\n        this.#target\n          ._targetManager()\n          .off(\n            TargetManagerEmittedEvents.TargetGone,\n            this.#onDetachedFromTarget\n          );\n        this.emit(PageEmittedEvents.Close);\n        this.#closed = true;\n      })\n      .catch(debugError);\n  }\n\n  #onDetachedFromTarget = (target: CDPTarget) => {\n    const sessionId = target._session()?.id();\n    const worker = this.#workers.get(sessionId!);\n    if (!worker) {\n      return;\n    }\n    this.#workers.delete(sessionId!);\n    this.emit(PageEmittedEvents.WorkerDestroyed, worker);\n  };\n\n  #onAttachedToTarget = (createdTarget: CDPTarget) => {\n    this.#frameManager.onAttachedToTarget(createdTarget);\n    if (createdTarget._getTargetInfo().type === 'worker') {\n      const session = createdTarget._session();\n      assert(session);\n      const worker = new WebWorker(\n        session,\n        createdTarget.url(),\n        this.#addConsoleMessage.bind(this),\n        this.#handleException.bind(this)\n      );\n      this.#workers.set(session.id(), worker);\n      this.emit(PageEmittedEvents.WorkerCreated, worker);\n    }\n    if (createdTarget._session()) {\n      this.#target\n        ._targetManager()\n        .addTargetInterceptor(\n          createdTarget._session()!,\n          this.#onAttachedToTarget\n        );\n    }\n  };\n\n  async #initialize(): Promise<void> {\n    try {\n      await Promise.all([\n        this.#frameManager.initialize(),\n        this.#client.send('Performance.enable'),\n        this.#client.send('Log.enable'),\n      ]);\n    } catch (err) {\n      if (isErrorLike(err) && isTargetClosedError(err)) {\n        debugError(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  async #onFileChooser(\n    event: Protocol.Page.FileChooserOpenedEvent\n  ): Promise<void> {\n    if (!this.#fileChooserDeferreds.size) {\n      return;\n    }\n\n    const frame = this.#frameManager.frame(event.frameId);\n    assert(frame, 'This should never happen.');\n\n    // This is guaranteed to be an HTMLInputElement handle by the event.\n    const handle = (await frame.worlds[MAIN_WORLD].adoptBackendNode(\n      event.backendNodeId\n    )) as ElementHandle<HTMLInputElement>;\n\n    const fileChooser = new FileChooser(handle, event);\n    for (const promise of this.#fileChooserDeferreds) {\n      promise.resolve(fileChooser);\n    }\n    this.#fileChooserDeferreds.clear();\n  }\n\n  /**\n   * @internal\n   */\n  _client(): CDPSession {\n    return this.#client;\n  }\n\n  override isServiceWorkerBypassed(): boolean {\n    return this.#serviceWorkerBypassed;\n  }\n\n  override isDragInterceptionEnabled(): boolean {\n    return this.#userDragInterceptionEnabled;\n  }\n\n  override isJavaScriptEnabled(): boolean {\n    return this.#emulationManager.javascriptEnabled;\n  }\n\n  override waitForFileChooser(\n    options: WaitTimeoutOptions = {}\n  ): Promise<FileChooser> {\n    const needsEnable = this.#fileChooserDeferreds.size === 0;\n    const {timeout = this.#timeoutSettings.timeout()} = options;\n    const deferred = Deferred.create<FileChooser>({\n      message: `Waiting for \\`FileChooser\\` failed: ${timeout}ms exceeded`,\n      timeout,\n    });\n    this.#fileChooserDeferreds.add(deferred);\n    let enablePromise: Promise<void> | undefined;\n    if (needsEnable) {\n      enablePromise = this.#client.send('Page.setInterceptFileChooserDialog', {\n        enabled: true,\n      });\n    }\n    return Promise.all([deferred.valueOrThrow(), enablePromise])\n      .then(([result]) => {\n        return result;\n      })\n      .catch(error => {\n        this.#fileChooserDeferreds.delete(deferred);\n        throw error;\n      });\n  }\n\n  override async setGeolocation(options: GeolocationOptions): Promise<void> {\n    return await this.#emulationManager.setGeolocation(options);\n  }\n\n  override target(): CDPTarget {\n    return this.#target;\n  }\n\n  override browser(): Browser {\n    return this.#target.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    return this.#target.browserContext();\n  }\n\n  #onTargetCrashed(): void {\n    this.emit('error', new Error('Page crashed!'));\n  }\n\n  #onLogEntryAdded(event: Protocol.Log.EntryAddedEvent): void {\n    const {level, text, args, source, url, lineNumber} = event.entry;\n    if (args) {\n      args.map(arg => {\n        return releaseObject(this.#client, arg);\n      });\n    }\n    if (source !== 'worker') {\n      this.emit(\n        PageEmittedEvents.Console,\n        new ConsoleMessage(level, text, [], [{url, lineNumber}])\n      );\n    }\n  }\n\n  override mainFrame(): Frame {\n    return this.#frameManager.mainFrame();\n  }\n\n  override get keyboard(): CDPKeyboard {\n    return this.#keyboard;\n  }\n\n  override get touchscreen(): CDPTouchscreen {\n    return this.#touchscreen;\n  }\n\n  override get coverage(): Coverage {\n    return this.#coverage;\n  }\n\n  override get tracing(): Tracing {\n    return this.#tracing;\n  }\n\n  override get accessibility(): Accessibility {\n    return this.#accessibility;\n  }\n\n  override frames(): Frame[] {\n    return this.#frameManager.frames();\n  }\n\n  override workers(): WebWorker[] {\n    return Array.from(this.#workers.values());\n  }\n\n  override async setRequestInterception(value: boolean): Promise<void> {\n    return this.#frameManager.networkManager.setRequestInterception(value);\n  }\n\n  override async setBypassServiceWorker(bypass: boolean): Promise<void> {\n    this.#serviceWorkerBypassed = bypass;\n    return this.#client.send('Network.setBypassServiceWorker', {bypass});\n  }\n\n  override async setDragInterception(enabled: boolean): Promise<void> {\n    this.#userDragInterceptionEnabled = enabled;\n    return this.#client.send('Input.setInterceptDrags', {enabled});\n  }\n\n  override setOfflineMode(enabled: boolean): Promise<void> {\n    return this.#frameManager.networkManager.setOfflineMode(enabled);\n  }\n\n  override emulateNetworkConditions(\n    networkConditions: NetworkConditions | null\n  ): Promise<void> {\n    return this.#frameManager.networkManager.emulateNetworkConditions(\n      networkConditions\n    );\n  }\n\n  override setDefaultNavigationTimeout(timeout: number): void {\n    this.#timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n\n  override setDefaultTimeout(timeout: number): void {\n    this.#timeoutSettings.setDefaultTimeout(timeout);\n  }\n\n  override getDefaultTimeout(): number {\n    return this.#timeoutSettings.timeout();\n  }\n\n  override async evaluateHandle<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<HandleFor<Awaited<ReturnType<Func>>>> {\n    pageFunction = withSourcePuppeteerURLIfNone(\n      this.evaluateHandle.name,\n      pageFunction\n    );\n    const context = await this.mainFrame().executionContext();\n    return context.evaluateHandle(pageFunction, ...args);\n  }\n\n  override async queryObjects<Prototype>(\n    prototypeHandle: JSHandle<Prototype>\n  ): Promise<JSHandle<Prototype[]>> {\n    const context = await this.mainFrame().executionContext();\n    assert(!prototypeHandle.disposed, 'Prototype JSHandle is disposed!');\n    assert(\n      prototypeHandle.id,\n      'Prototype JSHandle must not be referencing primitive value'\n    );\n    const response = await context._client.send('Runtime.queryObjects', {\n      prototypeObjectId: prototypeHandle.id,\n    });\n    return createJSHandle(context, response.objects) as HandleFor<Prototype[]>;\n  }\n\n  override async cookies(\n    ...urls: string[]\n  ): Promise<Protocol.Network.Cookie[]> {\n    const originalCookies = (\n      await this.#client.send('Network.getCookies', {\n        urls: urls.length ? urls : [this.url()],\n      })\n    ).cookies;\n\n    const unsupportedCookieAttributes = ['priority'];\n    const filterUnsupportedAttributes = (\n      cookie: Protocol.Network.Cookie\n    ): Protocol.Network.Cookie => {\n      for (const attr of unsupportedCookieAttributes) {\n        delete (cookie as unknown as Record<string, unknown>)[attr];\n      }\n      return cookie;\n    };\n    return originalCookies.map(filterUnsupportedAttributes);\n  }\n\n  override async deleteCookie(\n    ...cookies: Protocol.Network.DeleteCookiesRequest[]\n  ): Promise<void> {\n    const pageURL = this.url();\n    for (const cookie of cookies) {\n      const item = Object.assign({}, cookie);\n      if (!cookie.url && pageURL.startsWith('http')) {\n        item.url = pageURL;\n      }\n      await this.#client.send('Network.deleteCookies', item);\n    }\n  }\n\n  override async setCookie(\n    ...cookies: Protocol.Network.CookieParam[]\n  ): Promise<void> {\n    const pageURL = this.url();\n    const startsWithHTTP = pageURL.startsWith('http');\n    const items = cookies.map(cookie => {\n      const item = Object.assign({}, cookie);\n      if (!item.url && startsWithHTTP) {\n        item.url = pageURL;\n      }\n      assert(\n        item.url !== 'about:blank',\n        `Blank page can not have cookie \"${item.name}\"`\n      );\n      assert(\n        !String.prototype.startsWith.call(item.url || '', 'data:'),\n        `Data URL page can not have cookie \"${item.name}\"`\n      );\n      return item;\n    });\n    await this.deleteCookie(...items);\n    if (items.length) {\n      await this.#client.send('Network.setCookies', {cookies: items});\n    }\n  }\n\n  override async exposeFunction(\n    name: string,\n    pptrFunction: Function | {default: Function}\n  ): Promise<void> {\n    if (this.#bindings.has(name)) {\n      throw new Error(\n        `Failed to add page binding with name ${name}: window['${name}'] already exists!`\n      );\n    }\n\n    let binding: Binding;\n    switch (typeof pptrFunction) {\n      case 'function':\n        binding = new Binding(\n          name,\n          pptrFunction as (...args: unknown[]) => unknown\n        );\n        break;\n      default:\n        binding = new Binding(\n          name,\n          pptrFunction.default as (...args: unknown[]) => unknown\n        );\n        break;\n    }\n\n    this.#bindings.set(name, binding);\n\n    const expression = pageBindingInitString('exposedFun', name);\n    await this.#client.send('Runtime.addBinding', {name});\n    const {identifier} = await this.#client.send(\n      'Page.addScriptToEvaluateOnNewDocument',\n      {\n        source: expression,\n      }\n    );\n\n    this.#exposedFunctions.set(name, identifier);\n\n    await Promise.all(\n      this.frames().map(frame => {\n        return frame.evaluate(expression).catch(debugError);\n      })\n    );\n  }\n\n  override async removeExposedFunction(name: string): Promise<void> {\n    const exposedFun = this.#exposedFunctions.get(name);\n    if (!exposedFun) {\n      throw new Error(\n        `Failed to remove page binding with name ${name}: window['${name}'] does not exists!`\n      );\n    }\n\n    await this.#client.send('Runtime.removeBinding', {name});\n    await this.removeScriptToEvaluateOnNewDocument(exposedFun);\n\n    await Promise.all(\n      this.frames().map(frame => {\n        return frame\n          .evaluate(name => {\n            // Removes the dangling Puppeteer binding wrapper.\n            // @ts-expect-error: In a different context.\n            globalThis[name] = undefined;\n          }, name)\n          .catch(debugError);\n      })\n    );\n\n    this.#exposedFunctions.delete(name);\n    this.#bindings.delete(name);\n  }\n\n  override async authenticate(credentials: Credentials): Promise<void> {\n    return this.#frameManager.networkManager.authenticate(credentials);\n  }\n\n  override async setExtraHTTPHeaders(\n    headers: Record<string, string>\n  ): Promise<void> {\n    return this.#frameManager.networkManager.setExtraHTTPHeaders(headers);\n  }\n\n  override async setUserAgent(\n    userAgent: string,\n    userAgentMetadata?: Protocol.Emulation.UserAgentMetadata\n  ): Promise<void> {\n    return this.#frameManager.networkManager.setUserAgent(\n      userAgent,\n      userAgentMetadata\n    );\n  }\n\n  override async metrics(): Promise<Metrics> {\n    const response = await this.#client.send('Performance.getMetrics');\n    return this.#buildMetricsObject(response.metrics);\n  }\n\n  #emitMetrics(event: Protocol.Performance.MetricsEvent): void {\n    this.emit(PageEmittedEvents.Metrics, {\n      title: event.title,\n      metrics: this.#buildMetricsObject(event.metrics),\n    });\n  }\n\n  #buildMetricsObject(metrics?: Protocol.Performance.Metric[]): Metrics {\n    const result: Record<\n      Protocol.Performance.Metric['name'],\n      Protocol.Performance.Metric['value']\n    > = {};\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) {\n        result[metric.name] = metric.value;\n      }\n    }\n    return result;\n  }\n\n  #handleException(exceptionDetails: Protocol.Runtime.ExceptionDetails): void {\n    this.emit(PageEmittedEvents.PageError, createClientError(exceptionDetails));\n  }\n\n  async #onConsoleAPI(\n    event: Protocol.Runtime.ConsoleAPICalledEvent\n  ): Promise<void> {\n    if (event.executionContextId === 0) {\n      // DevTools protocol stores the last 1000 console messages. These\n      // messages are always reported even for removed execution contexts. In\n      // this case, they are marked with executionContextId = 0 and are\n      // reported upon enabling Runtime agent.\n      //\n      // Ignore these messages since:\n      // - there's no execution context we can use to operate with message\n      //   arguments\n      // - these messages are reported before Puppeteer clients can subscribe\n      //   to the 'console'\n      //   page event.\n      //\n      // @see https://github.com/puppeteer/puppeteer/issues/3865\n      return;\n    }\n    const context = this.#frameManager.getExecutionContextById(\n      event.executionContextId,\n      this.#client\n    );\n    if (!context) {\n      debugError(\n        new Error(\n          `ExecutionContext not found for a console message: ${JSON.stringify(\n            event\n          )}`\n        )\n      );\n      return;\n    }\n    const values = event.args.map(arg => {\n      return createJSHandle(context, arg);\n    });\n    this.#addConsoleMessage(event.type, values, event.stackTrace);\n  }\n\n  async #onBindingCalled(\n    event: Protocol.Runtime.BindingCalledEvent\n  ): Promise<void> {\n    let payload: BindingPayload;\n    try {\n      payload = JSON.parse(event.payload);\n    } catch {\n      // The binding was either called by something in the page or it was\n      // called before our wrapper was initialized.\n      return;\n    }\n    const {type, name, seq, args, isTrivial} = payload;\n    if (type !== 'exposedFun') {\n      return;\n    }\n\n    const context = this.#frameManager.executionContextById(\n      event.executionContextId,\n      this.#client\n    );\n    if (!context) {\n      return;\n    }\n\n    const binding = this.#bindings.get(name);\n    await binding?.run(context, seq, args, isTrivial);\n  }\n\n  #addConsoleMessage(\n    eventType: ConsoleMessageType,\n    args: JSHandle[],\n    stackTrace?: Protocol.Runtime.StackTrace\n  ): void {\n    if (!this.listenerCount(PageEmittedEvents.Console)) {\n      args.forEach(arg => {\n        return arg.dispose();\n      });\n      return;\n    }\n    const textTokens = [];\n    for (const arg of args) {\n      const remoteObject = arg.remoteObject();\n      if (remoteObject.objectId) {\n        textTokens.push(arg.toString());\n      } else {\n        textTokens.push(valueFromRemoteObject(remoteObject));\n      }\n    }\n    const stackTraceLocations = [];\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber,\n        });\n      }\n    }\n    const message = new ConsoleMessage(\n      eventType,\n      textTokens.join(' '),\n      args,\n      stackTraceLocations\n    );\n    this.emit(PageEmittedEvents.Console, message);\n  }\n\n  #onDialog(event: Protocol.Page.JavascriptDialogOpeningEvent): void {\n    const type = validateDialogType(event.type);\n    const dialog = new CDPDialog(\n      this.#client,\n      type,\n      event.message,\n      event.defaultPrompt\n    );\n    this.emit(PageEmittedEvents.Dialog, dialog);\n  }\n\n  override url(): string {\n    return this.mainFrame().url();\n  }\n\n  override async content(): Promise<string> {\n    return await this.mainFrame().content();\n  }\n\n  override async setContent(\n    html: string,\n    options: WaitForOptions = {}\n  ): Promise<void> {\n    await this.mainFrame().setContent(html, options);\n  }\n\n  override async goto(\n    url: string,\n    options: WaitForOptions & {referer?: string; referrerPolicy?: string} = {}\n  ): Promise<HTTPResponse | null> {\n    return await this.mainFrame().goto(url, options);\n  }\n\n  override async reload(\n    options?: WaitForOptions\n  ): Promise<HTTPResponse | null> {\n    const result = await Promise.all([\n      this.waitForNavigation(options),\n      this.#client.send('Page.reload'),\n    ]);\n\n    return result[0];\n  }\n\n  override async createCDPSession(): Promise<CDPSession> {\n    return await this.target().createCDPSession();\n  }\n\n  override async waitForRequest(\n    urlOrPredicate: string | ((req: HTTPRequest) => boolean | Promise<boolean>),\n    options: {timeout?: number} = {}\n  ): Promise<HTTPRequest> {\n    const {timeout = this.#timeoutSettings.timeout()} = options;\n    return waitForEvent(\n      this.#frameManager.networkManager,\n      NetworkManagerEmittedEvents.Request,\n      async request => {\n        if (isString(urlOrPredicate)) {\n          return urlOrPredicate === request.url();\n        }\n        if (typeof urlOrPredicate === 'function') {\n          return !!(await urlOrPredicate(request));\n        }\n        return false;\n      },\n      timeout,\n      this.#sessionCloseDeferred.valueOrThrow()\n    );\n  }\n\n  override async waitForResponse(\n    urlOrPredicate:\n      | string\n      | ((res: HTTPResponse) => boolean | Promise<boolean>),\n    options: {timeout?: number} = {}\n  ): Promise<HTTPResponse> {\n    const {timeout = this.#timeoutSettings.timeout()} = options;\n    return waitForEvent(\n      this.#frameManager.networkManager,\n      NetworkManagerEmittedEvents.Response,\n      async response => {\n        if (isString(urlOrPredicate)) {\n          return urlOrPredicate === response.url();\n        }\n        if (typeof urlOrPredicate === 'function') {\n          return !!(await urlOrPredicate(response));\n        }\n        return false;\n      },\n      timeout,\n      this.#sessionCloseDeferred.valueOrThrow()\n    );\n  }\n\n  override async waitForNetworkIdle(\n    options: {idleTime?: number; timeout?: number} = {}\n  ): Promise<void> {\n    const {idleTime = 500, timeout = this.#timeoutSettings.timeout()} = options;\n\n    await this._waitForNetworkIdle(\n      this.#frameManager.networkManager,\n      idleTime,\n      timeout,\n      this.#sessionCloseDeferred\n    );\n  }\n\n  override async waitForFrame(\n    urlOrPredicate: string | ((frame: Frame) => boolean | Promise<boolean>),\n    options: {timeout?: number} = {}\n  ): Promise<Frame> {\n    const {timeout = this.#timeoutSettings.timeout()} = options;\n\n    let predicate: (frame: Frame) => Promise<boolean>;\n    if (isString(urlOrPredicate)) {\n      predicate = (frame: Frame) => {\n        return Promise.resolve(urlOrPredicate === frame.url());\n      };\n    } else {\n      predicate = (frame: Frame) => {\n        const value = urlOrPredicate(frame);\n        if (typeof value === 'boolean') {\n          return Promise.resolve(value);\n        }\n        return value;\n      };\n    }\n\n    const eventRace: Promise<Frame> = Deferred.race([\n      waitForEvent(\n        this.#frameManager,\n        FrameManagerEmittedEvents.FrameAttached,\n        predicate,\n        timeout,\n        this.#sessionCloseDeferred.valueOrThrow()\n      ),\n      waitForEvent(\n        this.#frameManager,\n        FrameManagerEmittedEvents.FrameNavigated,\n        predicate,\n        timeout,\n        this.#sessionCloseDeferred.valueOrThrow()\n      ),\n      ...this.frames().map(async frame => {\n        if (await predicate(frame)) {\n          return frame;\n        }\n        return await eventRace;\n      }),\n    ]);\n\n    return eventRace;\n  }\n\n  override async goBack(\n    options: WaitForOptions = {}\n  ): Promise<HTTPResponse | null> {\n    return this.#go(-1, options);\n  }\n\n  override async goForward(\n    options: WaitForOptions = {}\n  ): Promise<HTTPResponse | null> {\n    return this.#go(+1, options);\n  }\n\n  async #go(\n    delta: number,\n    options: WaitForOptions\n  ): Promise<HTTPResponse | null> {\n    const history = await this.#client.send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) {\n      return null;\n    }\n    const result = await Promise.all([\n      this.waitForNavigation(options),\n      this.#client.send('Page.navigateToHistoryEntry', {entryId: entry.id}),\n    ]);\n    return result[0];\n  }\n\n  override async bringToFront(): Promise<void> {\n    await this.#client.send('Page.bringToFront');\n  }\n\n  override async setJavaScriptEnabled(enabled: boolean): Promise<void> {\n    return await this.#emulationManager.setJavaScriptEnabled(enabled);\n  }\n\n  override async setBypassCSP(enabled: boolean): Promise<void> {\n    await this.#client.send('Page.setBypassCSP', {enabled});\n  }\n\n  override async emulateMediaType(type?: string): Promise<void> {\n    return await this.#emulationManager.emulateMediaType(type);\n  }\n\n  override async emulateCPUThrottling(factor: number | null): Promise<void> {\n    return await this.#emulationManager.emulateCPUThrottling(factor);\n  }\n\n  override async emulateMediaFeatures(\n    features?: MediaFeature[]\n  ): Promise<void> {\n    return await this.#emulationManager.emulateMediaFeatures(features);\n  }\n\n  override async emulateTimezone(timezoneId?: string): Promise<void> {\n    return await this.#emulationManager.emulateTimezone(timezoneId);\n  }\n\n  override async emulateIdleState(overrides?: {\n    isUserActive: boolean;\n    isScreenUnlocked: boolean;\n  }): Promise<void> {\n    return await this.#emulationManager.emulateIdleState(overrides);\n  }\n\n  override async emulateVisionDeficiency(\n    type?: Protocol.Emulation.SetEmulatedVisionDeficiencyRequest['type']\n  ): Promise<void> {\n    return await this.#emulationManager.emulateVisionDeficiency(type);\n  }\n\n  override async setViewport(viewport: Viewport): Promise<void> {\n    const needsReload = await this.#emulationManager.emulateViewport(viewport);\n    this.#viewport = viewport;\n    if (needsReload) {\n      await this.reload();\n    }\n  }\n\n  override viewport(): Viewport | null {\n    return this.#viewport;\n  }\n\n  override async evaluate<\n    Params extends unknown[],\n    Func extends EvaluateFunc<Params> = EvaluateFunc<Params>,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<Awaited<ReturnType<Func>>> {\n    pageFunction = withSourcePuppeteerURLIfNone(\n      this.evaluate.name,\n      pageFunction\n    );\n    return this.mainFrame().evaluate(pageFunction, ...args);\n  }\n\n  override async evaluateOnNewDocument<\n    Params extends unknown[],\n    Func extends (...args: Params) => unknown = (...args: Params) => unknown,\n  >(\n    pageFunction: Func | string,\n    ...args: Params\n  ): Promise<NewDocumentScriptEvaluation> {\n    const source = evaluationString(pageFunction, ...args);\n    const {identifier} = await this.#client.send(\n      'Page.addScriptToEvaluateOnNewDocument',\n      {\n        source,\n      }\n    );\n\n    return {identifier};\n  }\n\n  override async removeScriptToEvaluateOnNewDocument(\n    identifier: string\n  ): Promise<void> {\n    await this.#client.send('Page.removeScriptToEvaluateOnNewDocument', {\n      identifier,\n    });\n  }\n\n  override async setCacheEnabled(enabled = true): Promise<void> {\n    await this.#frameManager.networkManager.setCacheEnabled(enabled);\n  }\n\n  override screenshot(\n    options: ScreenshotOptions & {encoding: 'base64'}\n  ): Promise<string>;\n  override screenshot(\n    options?: ScreenshotOptions & {encoding?: 'binary'}\n  ): Promise<Buffer>;\n  override async screenshot(\n    options: ScreenshotOptions = {}\n  ): Promise<Buffer | string> {\n    let screenshotType = Protocol.Page.CaptureScreenshotRequestFormat.Png;\n    // options.type takes precedence over inferring the type from options.path\n    // because it may be a 0-length file with no extension created beforehand\n    // (i.e. as a temp file).\n    if (options.type) {\n      screenshotType =\n        options.type as Protocol.Page.CaptureScreenshotRequestFormat;\n    } else if (options.path) {\n      const filePath = options.path;\n      const extension = filePath\n        .slice(filePath.lastIndexOf('.') + 1)\n        .toLowerCase();\n      switch (extension) {\n        case 'png':\n          screenshotType = Protocol.Page.CaptureScreenshotRequestFormat.Png;\n          break;\n        case 'jpeg':\n        case 'jpg':\n          screenshotType = Protocol.Page.CaptureScreenshotRequestFormat.Jpeg;\n          break;\n        case 'webp':\n          screenshotType = Protocol.Page.CaptureScreenshotRequestFormat.Webp;\n          break;\n        default:\n          throw new Error(\n            `Unsupported screenshot type for extension \\`.${extension}\\``\n          );\n      }\n    }\n\n    if (options.quality) {\n      assert(\n        screenshotType === Protocol.Page.CaptureScreenshotRequestFormat.Jpeg ||\n          screenshotType === Protocol.Page.CaptureScreenshotRequestFormat.Webp,\n        'options.quality is unsupported for the ' +\n          screenshotType +\n          ' screenshots'\n      );\n      assert(\n        typeof options.quality === 'number',\n        'Expected options.quality to be a number but found ' +\n          typeof options.quality\n      );\n      assert(\n        Number.isInteger(options.quality),\n        'Expected options.quality to be an integer'\n      );\n      assert(\n        options.quality >= 0 && options.quality <= 100,\n        'Expected options.quality to be between 0 and 100 (inclusive), got ' +\n          options.quality\n      );\n    }\n    assert(\n      !options.clip || !options.fullPage,\n      'options.clip and options.fullPage are exclusive'\n    );\n    if (options.clip) {\n      assert(\n        typeof options.clip.x === 'number',\n        'Expected options.clip.x to be a number but found ' +\n          typeof options.clip.x\n      );\n      assert(\n        typeof options.clip.y === 'number',\n        'Expected options.clip.y to be a number but found ' +\n          typeof options.clip.y\n      );\n      assert(\n        typeof options.clip.width === 'number',\n        'Expected options.clip.width to be a number but found ' +\n          typeof options.clip.width\n      );\n      assert(\n        typeof options.clip.height === 'number',\n        'Expected options.clip.height to be a number but found ' +\n          typeof options.clip.height\n      );\n      assert(\n        options.clip.width !== 0,\n        'Expected options.clip.width not to be 0.'\n      );\n      assert(\n        options.clip.height !== 0,\n        'Expected options.clip.height not to be 0.'\n      );\n    }\n    return this.#screenshotTaskQueue.postTask(() => {\n      return this.#screenshotTask(screenshotType, options);\n    });\n  }\n\n  async #screenshotTask(\n    format: Protocol.Page.CaptureScreenshotRequestFormat,\n    options: ScreenshotOptions = {}\n  ): Promise<Buffer | string> {\n    await this.#client.send('Target.activateTarget', {\n      targetId: this.#target._targetId,\n    });\n    let clip = options.clip ? processClip(options.clip) : undefined;\n    let captureBeyondViewport = options.captureBeyondViewport ?? true;\n    const fromSurface = options.fromSurface;\n\n    if (options.fullPage) {\n      // Overwrite clip for full page.\n      clip = undefined;\n\n      if (!captureBeyondViewport) {\n        const metrics = await this.#client.send('Page.getLayoutMetrics');\n        // Fallback to `contentSize` in case of using Firefox.\n        const {width, height} = metrics.cssContentSize || metrics.contentSize;\n        const {\n          isMobile = false,\n          deviceScaleFactor = 1,\n          isLandscape = false,\n        } = this.#viewport || {};\n        const screenOrientation: Protocol.Emulation.ScreenOrientation =\n          isLandscape\n            ? {angle: 90, type: 'landscapePrimary'}\n            : {angle: 0, type: 'portraitPrimary'};\n        await this.#client.send('Emulation.setDeviceMetricsOverride', {\n          mobile: isMobile,\n          width,\n          height,\n          deviceScaleFactor,\n          screenOrientation,\n        });\n      }\n    } else if (!clip) {\n      captureBeyondViewport = false;\n    }\n\n    const shouldSetDefaultBackground =\n      options.omitBackground && (format === 'png' || format === 'webp');\n    if (shouldSetDefaultBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n\n    const result = await this.#client.send('Page.captureScreenshot', {\n      format,\n      optimizeForSpeed: options.optimizeForSpeed,\n      quality: options.quality,\n      clip: clip && {\n        ...clip,\n        scale: clip.scale ?? 1,\n      },\n      captureBeyondViewport,\n      fromSurface,\n    });\n    if (shouldSetDefaultBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n\n    if (options.fullPage && this.#viewport) {\n      await this.setViewport(this.#viewport);\n    }\n\n    if (options.encoding === 'base64') {\n      return result.data;\n    }\n\n    const buffer = Buffer.from(result.data, 'base64');\n    await this._maybeWriteBufferToFile(options.path, buffer);\n\n    return buffer;\n\n    function processClip(clip: ScreenshotClip): ScreenshotClip {\n      const x = Math.round(clip.x);\n      const y = Math.round(clip.y);\n      const width = Math.round(clip.width + clip.x - x);\n      const height = Math.round(clip.height + clip.y - y);\n      return {x, y, width, height, scale: clip.scale};\n    }\n  }\n\n  override async createPDFStream(options: PDFOptions = {}): Promise<Readable> {\n    const {\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      width: paperWidth,\n      height: paperHeight,\n      margin,\n      pageRanges,\n      preferCSSPageSize,\n      omitBackground,\n      timeout,\n    } = this._getPDFOptions(options);\n\n    if (omitBackground) {\n      await this.#emulationManager.setTransparentBackgroundColor();\n    }\n\n    const printCommandPromise = this.#client.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop: margin.top,\n      marginBottom: margin.bottom,\n      marginLeft: margin.left,\n      marginRight: margin.right,\n      pageRanges,\n      preferCSSPageSize,\n    });\n\n    const result = await waitWithTimeout(\n      printCommandPromise,\n      'Page.printToPDF',\n      timeout\n    );\n\n    if (omitBackground) {\n      await this.#emulationManager.resetDefaultBackgroundColor();\n    }\n\n    assert(result.stream, '`stream` is missing from `Page.printToPDF');\n    return getReadableFromProtocolStream(this.#client, result.stream);\n  }\n\n  override async pdf(options: PDFOptions = {}): Promise<Buffer> {\n    const {path = undefined} = options;\n    const readable = await this.createPDFStream(options);\n    const buffer = await getReadableAsBuffer(readable, path);\n    assert(buffer, 'Could not create buffer');\n    return buffer;\n  }\n\n  override async title(): Promise<string> {\n    return this.mainFrame().title();\n  }\n\n  override async close(\n    options: {runBeforeUnload?: boolean} = {runBeforeUnload: undefined}\n  ): Promise<void> {\n    const connection = this.#client.connection();\n    assert(\n      connection,\n      'Protocol error: Connection closed. Most likely the page has been closed.'\n    );\n    const runBeforeUnload = !!options.runBeforeUnload;\n    if (runBeforeUnload) {\n      await this.#client.send('Page.close');\n    } else {\n      await connection.send('Target.closeTarget', {\n        targetId: this.#target._targetId,\n      });\n      await this.#target._isClosedDeferred.valueOrThrow();\n    }\n  }\n\n  override isClosed(): boolean {\n    return this.#closed;\n  }\n\n  override get mouse(): CDPMouse {\n    return this.#mouse;\n  }\n\n  /**\n   * This method is typically coupled with an action that triggers a device\n   * request from an api such as WebBluetooth.\n   *\n   * :::caution\n   *\n   * This must be called before the device request is made. It will not return a\n   * currently active device prompt.\n   *\n   * :::\n   *\n   * @example\n   *\n   * ```ts\n   * const [devicePrompt] = Promise.all([\n   *   page.waitForDevicePrompt(),\n   *   page.click('#connect-bluetooth'),\n   * ]);\n   * await devicePrompt.select(\n   *   await devicePrompt.waitForDevice(({name}) => name.includes('My Device'))\n   * );\n   * ```\n   */\n  override waitForDevicePrompt(\n    options: WaitTimeoutOptions = {}\n  ): Promise<DeviceRequestPrompt> {\n    return this.mainFrame().waitForDevicePrompt(options);\n  }\n}\n\nconst supportedMetrics = new Set<string>([\n  'Timestamp',\n  'Documents',\n  'Frames',\n  'JSEventListeners',\n  'Nodes',\n  'LayoutCount',\n  'RecalcStyleCount',\n  'LayoutDuration',\n  'RecalcStyleDuration',\n  'ScriptDuration',\n  'TaskDuration',\n  'JSHeapUsedSize',\n  'JSHeapTotalSize',\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}