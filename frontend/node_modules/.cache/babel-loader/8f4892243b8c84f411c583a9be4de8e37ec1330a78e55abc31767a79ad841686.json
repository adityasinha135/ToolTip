{"ast":null,"code":"/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport fs from 'fs';\nimport path from 'path';\nimport { Browser } from './browser-data/browser-data.js';\nimport { computeExecutablePath } from './launch.js';\n/**\n * @public\n */\nexport class InstalledBrowser {\n  browser;\n  buildId;\n  platform;\n  #cache;\n  /**\n   * @internal\n   */\n  constructor(cache, browser, buildId, platform) {\n    this.#cache = cache;\n    this.browser = browser;\n    this.buildId = buildId;\n    this.platform = platform;\n  }\n  /**\n   * Path to the root of the installation folder. Use\n   * {@link computeExecutablePath} to get the path to the executable binary.\n   */\n  get path() {\n    return this.#cache.installationDir(this.browser, this.platform, this.buildId);\n  }\n  get executablePath() {\n    return computeExecutablePath({\n      cacheDir: this.#cache.rootDir,\n      platform: this.platform,\n      browser: this.browser,\n      buildId: this.buildId\n    });\n  }\n}\n/**\n * The cache used by Puppeteer relies on the following structure:\n *\n * - rootDir\n *   -- <browser1> | browserRoot(browser1)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   -- <browser2> | browserRoot(browser2)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   @internal\n */\nexport class Cache {\n  #rootDir;\n  constructor(rootDir) {\n    this.#rootDir = rootDir;\n  }\n  /**\n   * @internal\n   */\n  get rootDir() {\n    return this.#rootDir;\n  }\n  browserRoot(browser) {\n    return path.join(this.#rootDir, browser);\n  }\n  installationDir(browser, platform, buildId) {\n    return path.join(this.browserRoot(browser), `${platform}-${buildId}`);\n  }\n  clear() {\n    fs.rmSync(this.#rootDir, {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  uninstall(browser, platform, buildId) {\n    fs.rmSync(this.installationDir(browser, platform, buildId), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500\n    });\n  }\n  getInstalledBrowsers() {\n    if (!fs.existsSync(this.#rootDir)) {\n      return [];\n    }\n    const types = fs.readdirSync(this.#rootDir);\n    const browsers = types.filter(t => {\n      return Object.values(Browser).includes(t);\n    });\n    return browsers.flatMap(browser => {\n      const files = fs.readdirSync(this.browserRoot(browser));\n      return files.map(file => {\n        const result = parseFolderPath(path.join(this.browserRoot(browser), file));\n        if (!result) {\n          return null;\n        }\n        return new InstalledBrowser(this, browser, result.buildId, result.platform);\n      }).filter(item => {\n        return item !== null;\n      });\n    });\n  }\n}\nfunction parseFolderPath(folderPath) {\n  const name = path.basename(folderPath);\n  const splits = name.split('-');\n  if (splits.length !== 2) {\n    return;\n  }\n  const [platform, buildId] = splits;\n  if (!buildId || !platform) {\n    return;\n  }\n  return {\n    platform,\n    buildId\n  };\n}","map":{"version":3,"names":["fs","path","Browser","computeExecutablePath","InstalledBrowser","browser","buildId","platform","cache","constructor","installationDir","executablePath","cacheDir","rootDir","Cache","browserRoot","join","clear","rmSync","force","recursive","maxRetries","retryDelay","uninstall","getInstalledBrowsers","existsSync","types","readdirSync","browsers","filter","t","Object","values","includes","flatMap","files","map","file","result","parseFolderPath","item","folderPath","name","basename","splits","split","length"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/@puppeteer/browsers/src/Cache.ts"],"sourcesContent":["/**\n * Copyright 2023 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport {Browser, BrowserPlatform} from './browser-data/browser-data.js';\nimport {computeExecutablePath} from './launch.js';\n\n/**\n * @public\n */\nexport class InstalledBrowser {\n  browser: Browser;\n  buildId: string;\n  platform: BrowserPlatform;\n\n  #cache: Cache;\n\n  /**\n   * @internal\n   */\n  constructor(\n    cache: Cache,\n    browser: Browser,\n    buildId: string,\n    platform: BrowserPlatform\n  ) {\n    this.#cache = cache;\n    this.browser = browser;\n    this.buildId = buildId;\n    this.platform = platform;\n  }\n\n  /**\n   * Path to the root of the installation folder. Use\n   * {@link computeExecutablePath} to get the path to the executable binary.\n   */\n  get path(): string {\n    return this.#cache.installationDir(\n      this.browser,\n      this.platform,\n      this.buildId\n    );\n  }\n\n  get executablePath(): string {\n    return computeExecutablePath({\n      cacheDir: this.#cache.rootDir,\n      platform: this.platform,\n      browser: this.browser,\n      buildId: this.buildId,\n    });\n  }\n}\n\n/**\n * The cache used by Puppeteer relies on the following structure:\n *\n * - rootDir\n *   -- <browser1> | browserRoot(browser1)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   -- <browser2> | browserRoot(browser2)\n *   ---- <platform>-<buildId> | installationDir()\n *   ------ the browser-platform-buildId\n *   ------ specific structure.\n *   @internal\n */\nexport class Cache {\n  #rootDir: string;\n\n  constructor(rootDir: string) {\n    this.#rootDir = rootDir;\n  }\n\n  /**\n   * @internal\n   */\n  get rootDir(): string {\n    return this.#rootDir;\n  }\n\n  browserRoot(browser: Browser): string {\n    return path.join(this.#rootDir, browser);\n  }\n\n  installationDir(\n    browser: Browser,\n    platform: BrowserPlatform,\n    buildId: string\n  ): string {\n    return path.join(this.browserRoot(browser), `${platform}-${buildId}`);\n  }\n\n  clear(): void {\n    fs.rmSync(this.#rootDir, {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500,\n    });\n  }\n\n  uninstall(\n    browser: Browser,\n    platform: BrowserPlatform,\n    buildId: string\n  ): void {\n    fs.rmSync(this.installationDir(browser, platform, buildId), {\n      force: true,\n      recursive: true,\n      maxRetries: 10,\n      retryDelay: 500,\n    });\n  }\n\n  getInstalledBrowsers(): InstalledBrowser[] {\n    if (!fs.existsSync(this.#rootDir)) {\n      return [];\n    }\n    const types = fs.readdirSync(this.#rootDir);\n    const browsers = types.filter((t): t is Browser => {\n      return (Object.values(Browser) as string[]).includes(t);\n    });\n    return browsers.flatMap(browser => {\n      const files = fs.readdirSync(this.browserRoot(browser));\n      return files\n        .map(file => {\n          const result = parseFolderPath(\n            path.join(this.browserRoot(browser), file)\n          );\n          if (!result) {\n            return null;\n          }\n          return new InstalledBrowser(\n            this,\n            browser,\n            result.buildId,\n            result.platform as BrowserPlatform\n          );\n        })\n        .filter((item: InstalledBrowser | null): item is InstalledBrowser => {\n          return item !== null;\n        });\n    });\n  }\n}\n\nfunction parseFolderPath(\n  folderPath: string\n): {platform: string; buildId: string} | undefined {\n  const name = path.basename(folderPath);\n  const splits = name.split('-');\n  if (splits.length !== 2) {\n    return;\n  }\n  const [platform, buildId] = splits;\n  if (!buildId || !platform) {\n    return;\n  }\n  return {platform, buildId};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}