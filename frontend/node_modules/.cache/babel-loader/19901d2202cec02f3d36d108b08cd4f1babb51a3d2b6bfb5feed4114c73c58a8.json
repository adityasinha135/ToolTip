{"ast":null,"code":"/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Target, TargetType } from '../api/Target.js';\nimport { Deferred } from '../util/Deferred.js';\nimport { CDPPage } from './Page.js';\nimport { debugError } from './util.js';\nimport { WebWorker } from './WebWorker.js';\n/**\n * @internal\n */\nexport var InitializationStatus;\n(function (InitializationStatus) {\n  InitializationStatus[\"SUCCESS\"] = \"success\";\n  InitializationStatus[\"ABORTED\"] = \"aborted\";\n})(InitializationStatus || (InitializationStatus = {}));\n/**\n * @internal\n */\nexport class CDPTarget extends Target {\n  #browserContext;\n  #session;\n  #targetInfo;\n  #targetManager;\n  #sessionFactory;\n  /**\n   * @internal\n   */\n  _initializedDeferred = Deferred.create();\n  /**\n   * @internal\n   */\n  _isClosedDeferred = Deferred.create();\n  /**\n   * @internal\n   */\n  _targetId;\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n  }\n  /**\n   * @internal\n   */\n  _session() {\n    return this.#session;\n  }\n  /**\n   * @internal\n   */\n  _sessionFactory() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n  createCDPSession() {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false);\n  }\n  url() {\n    return this.#targetInfo.url;\n  }\n  type() {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n  /**\n   * @internal\n   */\n  _targetManager() {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n  /**\n   * @internal\n   */\n  _getTargetInfo() {\n    return this.#targetInfo;\n  }\n  browser() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext.browser();\n  }\n  browserContext() {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext;\n  }\n  opener() {\n    const {\n      openerId\n    } = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser()._targets.get(openerId);\n  }\n  /**\n   * @internal\n   */\n  _targetInfoChanged(targetInfo) {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n  /**\n   * @internal\n   */\n  _initialize() {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n  /**\n   * @internal\n   */\n  _checkIfInitialized() {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class PageTarget extends CDPTarget {\n  #defaultViewport;\n  pagePromise;\n  #screenshotTaskQueue;\n  #ignoreHTTPSErrors;\n  /**\n   * @internal\n   */\n  constructor(targetInfo, session, browserContext, targetManager, sessionFactory, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n    this.#screenshotTaskQueue = screenshotTaskQueue;\n  }\n  _initialize() {\n    this._initializedDeferred.valueOrThrow().then(async result => {\n      if (result === InitializationStatus.ABORTED) {\n        return;\n      }\n      const opener = this.opener();\n      if (!(opener instanceof PageTarget)) {\n        return;\n      }\n      if (!opener || !opener.pagePromise || this.type() !== 'page') {\n        return true;\n      }\n      const openerPage = await opener.pagePromise;\n      if (!openerPage.listenerCount(\"popup\" /* PageEmittedEvents.Popup */)) {\n        return true;\n      }\n      const popupPage = await this.page();\n      openerPage.emit(\"popup\" /* PageEmittedEvents.Popup */, popupPage);\n      return true;\n    }).catch(debugError);\n    this._checkIfInitialized();\n  }\n  async page() {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return CDPPage._create(client, this, this.#ignoreHTTPSErrors, this.#defaultViewport ?? null, this.#screenshotTaskQueue);\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n  _checkIfInitialized() {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n/**\n * @internal\n */\nexport class WorkerTarget extends CDPTarget {\n  #workerPromise;\n  async worker() {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (session ? Promise.resolve(session) : this._sessionFactory()( /* isAutoAttachEmulated=*/false)).then(client => {\n        return new WebWorker(client, this._getTargetInfo().url, () => {} /* consoleAPICalled */, () => {} /* exceptionThrown */);\n      });\n    }\n\n    return this.#workerPromise;\n  }\n}\n/**\n * @internal\n */\nexport class OtherTarget extends CDPTarget {}","map":{"version":3,"names":["Target","TargetType","Deferred","CDPPage","debugError","WebWorker","InitializationStatus","CDPTarget","browserContext","session","targetInfo","targetManager","sessionFactory","_initializedDeferred","create","_isClosedDeferred","_targetId","constructor","targetId","_session","_sessionFactory","Error","createCDPSession","url","type","PAGE","BACKGROUND_PAGE","SERVICE_WORKER","SHARED_WORKER","BROWSER","WEBVIEW","OTHER","_targetManager","_getTargetInfo","browser","opener","openerId","_targets","get","_targetInfoChanged","_checkIfInitialized","_initialize","resolve","SUCCESS","resolved","PageTarget","defaultViewport","pagePromise","screenshotTaskQueue","ignoreHTTPSErrors","undefined","valueOrThrow","then","result","ABORTED","openerPage","listenerCount","popupPage","page","emit","catch","Promise","client","_create","WorkerTarget","workerPromise","worker","OtherTarget"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/Target.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Protocol} from 'devtools-protocol';\n\nimport type {Browser} from '../api/Browser.js';\nimport type {BrowserContext} from '../api/BrowserContext.js';\nimport {Page, PageEmittedEvents} from '../api/Page.js';\nimport {Target, TargetType} from '../api/Target.js';\nimport {Deferred} from '../util/Deferred.js';\n\nimport {CDPSession} from './Connection.js';\nimport {CDPPage} from './Page.js';\nimport {Viewport} from './PuppeteerViewport.js';\nimport {TargetManager} from './TargetManager.js';\nimport {TaskQueue} from './TaskQueue.js';\nimport {debugError} from './util.js';\nimport {WebWorker} from './WebWorker.js';\n\n/**\n * @internal\n */\nexport enum InitializationStatus {\n  SUCCESS = 'success',\n  ABORTED = 'aborted',\n}\n\n/**\n * @internal\n */\nexport class CDPTarget extends Target {\n  #browserContext?: BrowserContext;\n  #session?: CDPSession;\n  #targetInfo: Protocol.Target.TargetInfo;\n  #targetManager?: TargetManager;\n  #sessionFactory:\n    | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n    | undefined;\n\n  /**\n   * @internal\n   */\n  _initializedDeferred = Deferred.create<InitializationStatus>();\n  /**\n   * @internal\n   */\n  _isClosedDeferred = Deferred.create<void>();\n  /**\n   * @internal\n   */\n  _targetId: string;\n\n  /**\n   * To initialize the target for use, call initialize.\n   *\n   * @internal\n   */\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext | undefined,\n    targetManager: TargetManager | undefined,\n    sessionFactory:\n      | ((isAutoAttachEmulated: boolean) => Promise<CDPSession>)\n      | undefined\n  ) {\n    super();\n    this.#session = session;\n    this.#targetManager = targetManager;\n    this.#targetInfo = targetInfo;\n    this.#browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this.#sessionFactory = sessionFactory;\n  }\n\n  /**\n   * @internal\n   */\n  _session(): CDPSession | undefined {\n    return this.#session;\n  }\n\n  /**\n   * @internal\n   */\n  protected _sessionFactory(): (\n    isAutoAttachEmulated: boolean\n  ) => Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory;\n  }\n\n  override createCDPSession(): Promise<CDPSession> {\n    if (!this.#sessionFactory) {\n      throw new Error('sessionFactory is not initialized');\n    }\n    return this.#sessionFactory(false);\n  }\n\n  override url(): string {\n    return this.#targetInfo.url;\n  }\n\n  override type(): TargetType {\n    const type = this.#targetInfo.type;\n    switch (type) {\n      case 'page':\n        return TargetType.PAGE;\n      case 'background_page':\n        return TargetType.BACKGROUND_PAGE;\n      case 'service_worker':\n        return TargetType.SERVICE_WORKER;\n      case 'shared_worker':\n        return TargetType.SHARED_WORKER;\n      case 'browser':\n        return TargetType.BROWSER;\n      case 'webview':\n        return TargetType.WEBVIEW;\n      default:\n        return TargetType.OTHER;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _targetManager(): TargetManager {\n    if (!this.#targetManager) {\n      throw new Error('targetManager is not initialized');\n    }\n    return this.#targetManager;\n  }\n\n  /**\n   * @internal\n   */\n  _getTargetInfo(): Protocol.Target.TargetInfo {\n    return this.#targetInfo;\n  }\n\n  override browser(): Browser {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext.browser();\n  }\n\n  override browserContext(): BrowserContext {\n    if (!this.#browserContext) {\n      throw new Error('browserContext is not initialised');\n    }\n    return this.#browserContext;\n  }\n\n  override opener(): Target | undefined {\n    const {openerId} = this.#targetInfo;\n    if (!openerId) {\n      return;\n    }\n    return this.browser()._targets.get(openerId);\n  }\n\n  /**\n   * @internal\n   */\n  _targetInfoChanged(targetInfo: Protocol.Target.TargetInfo): void {\n    this.#targetInfo = targetInfo;\n    this._checkIfInitialized();\n  }\n\n  /**\n   * @internal\n   */\n  _initialize(): void {\n    this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n  }\n\n  /**\n   * @internal\n   */\n  protected _checkIfInitialized(): void {\n    if (!this._initializedDeferred.resolved()) {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class PageTarget extends CDPTarget {\n  #defaultViewport?: Viewport;\n  protected pagePromise?: Promise<Page>;\n  #screenshotTaskQueue: TaskQueue;\n  #ignoreHTTPSErrors: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(\n    targetInfo: Protocol.Target.TargetInfo,\n    session: CDPSession | undefined,\n    browserContext: BrowserContext,\n    targetManager: TargetManager,\n    sessionFactory: (isAutoAttachEmulated: boolean) => Promise<CDPSession>,\n    ignoreHTTPSErrors: boolean,\n    defaultViewport: Viewport | null,\n    screenshotTaskQueue: TaskQueue\n  ) {\n    super(targetInfo, session, browserContext, targetManager, sessionFactory);\n    this.#ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this.#defaultViewport = defaultViewport ?? undefined;\n    this.#screenshotTaskQueue = screenshotTaskQueue;\n  }\n\n  override _initialize(): void {\n    this._initializedDeferred\n      .valueOrThrow()\n      .then(async result => {\n        if (result === InitializationStatus.ABORTED) {\n          return;\n        }\n        const opener = this.opener();\n        if (!(opener instanceof PageTarget)) {\n          return;\n        }\n        if (!opener || !opener.pagePromise || this.type() !== 'page') {\n          return true;\n        }\n        const openerPage = await opener.pagePromise;\n        if (!openerPage.listenerCount(PageEmittedEvents.Popup)) {\n          return true;\n        }\n        const popupPage = await this.page();\n        openerPage.emit(PageEmittedEvents.Popup, popupPage);\n        return true;\n      })\n      .catch(debugError);\n    this._checkIfInitialized();\n  }\n\n  override async page(): Promise<Page | null> {\n    if (!this.pagePromise) {\n      const session = this._session();\n      this.pagePromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return CDPPage._create(\n          client,\n          this,\n          this.#ignoreHTTPSErrors,\n          this.#defaultViewport ?? null,\n          this.#screenshotTaskQueue\n        );\n      });\n    }\n    return (await this.pagePromise) ?? null;\n  }\n\n  override _checkIfInitialized(): void {\n    if (this._initializedDeferred.resolved()) {\n      return;\n    }\n    if (this._getTargetInfo().url !== '') {\n      this._initializedDeferred.resolve(InitializationStatus.SUCCESS);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport class WorkerTarget extends CDPTarget {\n  #workerPromise?: Promise<WebWorker>;\n\n  override async worker(): Promise<WebWorker | null> {\n    if (!this.#workerPromise) {\n      const session = this._session();\n      // TODO(einbinder): Make workers send their console logs.\n      this.#workerPromise = (\n        session\n          ? Promise.resolve(session)\n          : this._sessionFactory()(/* isAutoAttachEmulated=*/ false)\n      ).then(client => {\n        return new WebWorker(\n          client,\n          this._getTargetInfo().url,\n          () => {} /* consoleAPICalled */,\n          () => {} /* exceptionThrown */\n        );\n      });\n    }\n    return this.#workerPromise;\n  }\n}\n\n/**\n * @internal\n */\nexport class OtherTarget extends CDPTarget {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}