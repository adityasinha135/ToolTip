{"ast":null,"code":"/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from '../util/assert.js';\nimport { AsyncIterableUtil } from '../util/AsyncIterableUtil.js';\nimport { QueryHandler } from './QueryHandler.js';\nconst queryAXTree = async (client, element, accessibleName, role) => {\n  const {\n    nodes\n  } = await client.send('Accessibility.queryAXTree', {\n    objectId: element.id,\n    accessibleName,\n    role\n  });\n  return nodes.filter(node => {\n    return !node.role || node.role.value !== 'StaticText';\n  });\n};\nconst KNOWN_ATTRIBUTES = Object.freeze(['name', 'role']);\nconst isKnownAttribute = attribute => {\n  return KNOWN_ATTRIBUTES.includes(attribute);\n};\nconst normalizeValue = value => {\n  return value.replace(/ +/g, ' ').trim();\n};\n/**\n * The selectors consist of an accessible name to query for and optionally\n * further aria attributes on the form `[<attribute>=<value>]`.\n * Currently, we only support the `name` and `role` attribute.\n * The following examples showcase how the syntax works wrt. querying:\n *\n * - 'title[role=\"heading\"]' queries for elements with name 'title' and role 'heading'.\n * - '[role=\"img\"]' queries for elements with role 'img' and any name.\n * - 'label' queries for elements with name 'label' and any role.\n * - '[name=\"\"][role=\"button\"]' queries for elements with no name and role 'button'.\n */\nconst ATTRIBUTE_REGEXP = /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\nconst parseARIASelector = selector => {\n  const queryOptions = {};\n  const defaultName = selector.replace(ATTRIBUTE_REGEXP, (_, attribute, __, value) => {\n    attribute = attribute.trim();\n    assert(isKnownAttribute(attribute), `Unknown aria attribute \"${attribute}\" in selector`);\n    queryOptions[attribute] = normalizeValue(value);\n    return '';\n  });\n  if (defaultName && !queryOptions.name) {\n    queryOptions.name = normalizeValue(defaultName);\n  }\n  return queryOptions;\n};\n/**\n * @internal\n */\nexport class ARIAQueryHandler extends QueryHandler {\n  static querySelector = async (node, selector, {\n    ariaQuerySelector\n  }) => {\n    return ariaQuerySelector(node, selector);\n  };\n  static async *queryAll(element, selector) {\n    const context = element.executionContext();\n    const {\n      name,\n      role\n    } = parseARIASelector(selector);\n    const results = await queryAXTree(context._client, element, name, role);\n    const world = context._world;\n    yield* AsyncIterableUtil.map(results, node => {\n      return world.adoptBackendNode(node.backendDOMNodeId);\n    });\n  }\n  static queryOne = async (element, selector) => {\n    return (await AsyncIterableUtil.first(this.queryAll(element, selector))) ?? null;\n  };\n}","map":{"version":3,"names":["assert","AsyncIterableUtil","QueryHandler","queryAXTree","client","element","accessibleName","role","nodes","send","objectId","id","filter","node","value","KNOWN_ATTRIBUTES","Object","freeze","isKnownAttribute","attribute","includes","normalizeValue","replace","trim","ATTRIBUTE_REGEXP","parseARIASelector","selector","queryOptions","defaultName","_","__","name","ARIAQueryHandler","querySelector","ariaQuerySelector","queryAll","context","executionContext","results","_client","world","_world","map","adoptBackendNode","backendDOMNodeId","queryOne","first"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/AriaQueryHandler.ts"],"sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Protocol} from 'devtools-protocol';\n\nimport {ElementHandle} from '../api/ElementHandle.js';\nimport {assert} from '../util/assert.js';\nimport {AsyncIterableUtil} from '../util/AsyncIterableUtil.js';\n\nimport {CDPSession} from './Connection.js';\nimport {QueryHandler, QuerySelector} from './QueryHandler.js';\nimport {AwaitableIterable} from './types.js';\n\nconst queryAXTree = async (\n  client: CDPSession,\n  element: ElementHandle<Node>,\n  accessibleName?: string,\n  role?: string\n): Promise<Protocol.Accessibility.AXNode[]> => {\n  const {nodes} = await client.send('Accessibility.queryAXTree', {\n    objectId: element.id,\n    accessibleName,\n    role,\n  });\n  return nodes.filter((node: Protocol.Accessibility.AXNode) => {\n    return !node.role || node.role.value !== 'StaticText';\n  });\n};\n\ninterface ARIASelector {\n  name?: string;\n  role?: string;\n}\n\nconst KNOWN_ATTRIBUTES = Object.freeze(['name', 'role']);\nconst isKnownAttribute = (\n  attribute: string\n): attribute is keyof ARIASelector => {\n  return KNOWN_ATTRIBUTES.includes(attribute);\n};\n\nconst normalizeValue = (value: string): string => {\n  return value.replace(/ +/g, ' ').trim();\n};\n\n/**\n * The selectors consist of an accessible name to query for and optionally\n * further aria attributes on the form `[<attribute>=<value>]`.\n * Currently, we only support the `name` and `role` attribute.\n * The following examples showcase how the syntax works wrt. querying:\n *\n * - 'title[role=\"heading\"]' queries for elements with name 'title' and role 'heading'.\n * - '[role=\"img\"]' queries for elements with role 'img' and any name.\n * - 'label' queries for elements with name 'label' and any role.\n * - '[name=\"\"][role=\"button\"]' queries for elements with no name and role 'button'.\n */\nconst ATTRIBUTE_REGEXP =\n  /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\nconst parseARIASelector = (selector: string): ARIASelector => {\n  const queryOptions: ARIASelector = {};\n  const defaultName = selector.replace(\n    ATTRIBUTE_REGEXP,\n    (_, attribute, __, value) => {\n      attribute = attribute.trim();\n      assert(\n        isKnownAttribute(attribute),\n        `Unknown aria attribute \"${attribute}\" in selector`\n      );\n      queryOptions[attribute] = normalizeValue(value);\n      return '';\n    }\n  );\n  if (defaultName && !queryOptions.name) {\n    queryOptions.name = normalizeValue(defaultName);\n  }\n  return queryOptions;\n};\n\n/**\n * @internal\n */\nexport class ARIAQueryHandler extends QueryHandler {\n  static override querySelector: QuerySelector = async (\n    node,\n    selector,\n    {ariaQuerySelector}\n  ) => {\n    return ariaQuerySelector(node, selector);\n  };\n\n  static override async *queryAll(\n    element: ElementHandle<Node>,\n    selector: string\n  ): AwaitableIterable<ElementHandle<Node>> {\n    const context = element.executionContext();\n    const {name, role} = parseARIASelector(selector);\n    const results = await queryAXTree(context._client, element, name, role);\n    const world = context._world!;\n    yield* AsyncIterableUtil.map(results, node => {\n      return world.adoptBackendNode(node.backendDOMNodeId) as Promise<\n        ElementHandle<Node>\n      >;\n    });\n  }\n\n  static override queryOne = async (\n    element: ElementHandle<Node>,\n    selector: string\n  ): Promise<ElementHandle<Node> | null> => {\n    return (\n      (await AsyncIterableUtil.first(this.queryAll(element, selector))) ?? null\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}