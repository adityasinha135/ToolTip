{"ast":null,"code":"var _jsxFileName = \"/home/adityasinha/Desktop/React/topdf/src/Components/ReactPdf.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport Home from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReactPdf() {\n  _s();\n  const contentRef = useRef(null);\n  const downloadAsPdf = async () => {\n    try {\n      const element = contentRef.current;\n      const originalHeight = element.scrollHeight;\n      const viewportHeight = window.innerHeight;\n      const sections = Math.ceil(originalHeight / viewportHeight);\n\n      // Create a new jspdf instance\n      const pdf = new jsPDF({\n        unit: 'mm',\n        format: 'a4'\n      });\n      let currentPosition = 0;\n\n      // Capture each section of the webpage and add it to the PDF\n      for (let i = 0; i < sections; i++) {\n        // Set the height for capturing each section\n        const height = Math.min(viewportHeight, originalHeight - currentPosition);\n\n        // Capture the section using html2canvas\n        const canvas = await html2canvas(element, {\n          scrollY: -currentPosition,\n          height\n        });\n\n        // Calculate the aspect ratio for scaling to A4 size\n        const pdfWidth = 210;\n        const pdfHeight = canvas.height * pdfWidth / canvas.width;\n\n        // Add the image of the section to the PDF\n        pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n\n        // Move to the next section\n        currentPosition += viewportHeight;\n        if (i < sections - 1) {\n          pdf.addPage();\n        }\n      }\n\n      // Download the PDF\n      pdf.save('webpage.pdf');\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Webpage to PDF Downloader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadAsPdf,\n      children: \"Download as PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(ReactPdf, \"76RymMQDwORkpkOdsElhIIY+DNc=\");\n_c = ReactPdf;\nexport default ReactPdf;\nvar _c;\n$RefreshReg$(_c, \"ReactPdf\");","map":{"version":3,"names":["React","useRef","html2canvas","jsPDF","Home","jsxDEV","_jsxDEV","ReactPdf","_s","contentRef","downloadAsPdf","element","current","originalHeight","scrollHeight","viewportHeight","window","innerHeight","sections","Math","ceil","pdf","unit","format","currentPosition","i","height","min","canvas","scrollY","pdfWidth","pdfHeight","width","addImage","addPage","save","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["/home/adityasinha/Desktop/React/topdf/src/Components/ReactPdf.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\n\nimport Home from './Home';\n\nfunction ReactPdf() {\n    const contentRef = useRef(null);\n\n    const downloadAsPdf = async () => {\n      try {\n        const element = contentRef.current;\n        const originalHeight = element.scrollHeight;\n        const viewportHeight = window.innerHeight;\n        const sections = Math.ceil(originalHeight / viewportHeight);\n  \n        // Create a new jspdf instance\n        const pdf = new jsPDF({\n          unit: 'mm',\n          format: 'a4',\n        });\n  \n        let currentPosition = 0;\n  \n        // Capture each section of the webpage and add it to the PDF\n        for (let i = 0; i < sections; i++) {\n          // Set the height for capturing each section\n          const height = Math.min(viewportHeight, originalHeight - currentPosition);\n  \n          // Capture the section using html2canvas\n          const canvas = await html2canvas(element, {\n            scrollY: -currentPosition,\n            height,\n          });\n  \n          // Calculate the aspect ratio for scaling to A4 size\n          const pdfWidth = 210;\n          const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n  \n          // Add the image of the section to the PDF\n          pdf.addImage(canvas, 'PNG', 0, 0, pdfWidth, pdfHeight);\n  \n          // Move to the next section\n          currentPosition += viewportHeight;\n          if (i < sections - 1) {\n            pdf.addPage();\n          }\n        }\n  \n        // Download the PDF\n        pdf.save('webpage.pdf');\n      } catch (error) {\n        console.error('Error generating PDF:', error);\n      }\n    };\n\n  return (\n    <div>\n      <h1>Webpage to PDF Downloader</h1>\n      <div ref={contentRef}>\n        {/* Replace this with your actual webpage content */}\n        <Home></Home>\n      </div>\n      <button onClick={downloadAsPdf}>Download as PDF</button>\n    </div>\n  );\n}\n\nexport default ReactPdf;\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAMC,UAAU,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE/B,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,OAAO,GAAGF,UAAU,CAACG,OAAO;MAClC,MAAMC,cAAc,GAAGF,OAAO,CAACG,YAAY;MAC3C,MAAMC,cAAc,GAAGC,MAAM,CAACC,WAAW;MACzC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACP,cAAc,GAAGE,cAAc,CAAC;;MAE3D;MACA,MAAMM,GAAG,GAAG,IAAIlB,KAAK,CAAC;QACpBmB,IAAI,EAAE,IAAI;QACVC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAIC,eAAe,GAAG,CAAC;;MAEvB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,EAAEO,CAAC,EAAE,EAAE;QACjC;QACA,MAAMC,MAAM,GAAGP,IAAI,CAACQ,GAAG,CAACZ,cAAc,EAAEF,cAAc,GAAGW,eAAe,CAAC;;QAEzE;QACA,MAAMI,MAAM,GAAG,MAAM1B,WAAW,CAACS,OAAO,EAAE;UACxCkB,OAAO,EAAE,CAACL,eAAe;UACzBE;QACF,CAAC,CAAC;;QAEF;QACA,MAAMI,QAAQ,GAAG,GAAG;QACpB,MAAMC,SAAS,GAAIH,MAAM,CAACF,MAAM,GAAGI,QAAQ,GAAIF,MAAM,CAACI,KAAK;;QAE3D;QACAX,GAAG,CAACY,QAAQ,CAACL,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEE,QAAQ,EAAEC,SAAS,CAAC;;QAEtD;QACAP,eAAe,IAAIT,cAAc;QACjC,IAAIU,CAAC,GAAGP,QAAQ,GAAG,CAAC,EAAE;UACpBG,GAAG,CAACa,OAAO,CAAC,CAAC;QACf;MACF;;MAEA;MACAb,GAAG,CAACc,IAAI,CAAC,aAAa,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAEH,oBACE9B,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClCpC,OAAA;MAAKqC,GAAG,EAAElC,UAAW;MAAA6B,QAAA,eAEnBhC,OAAA,CAACF,IAAI;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACNpC,OAAA;MAAQsC,OAAO,EAAElC,aAAc;MAAA4B,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrD,CAAC;AAEV;AAAClC,EAAA,CA5DQD,QAAQ;AAAAsC,EAAA,GAARtC,QAAQ;AA8DjB,eAAeA,QAAQ;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}