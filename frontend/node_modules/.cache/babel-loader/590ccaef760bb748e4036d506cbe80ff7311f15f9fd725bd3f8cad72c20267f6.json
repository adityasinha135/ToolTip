{"ast":null,"code":"/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Deferred } from '../util/Deferred.js';\n/**\n * Keeps track of the page frame tree and it's is managed by\n * {@link FrameManager}. FrameTree uses frame IDs to reference frame and it\n * means that referenced frames might not be in the tree anymore. Thus, the tree\n * structure is eventually consistent.\n * @internal\n */\nexport class FrameTree {\n  #frames = new Map();\n  // frameID -> parentFrameID\n  #parentIds = new Map();\n  // frameID -> childFrameIDs\n  #childIds = new Map();\n  #mainFrame;\n  #waitRequests = new Map();\n  getMainFrame() {\n    return this.#mainFrame;\n  }\n  getById(frameId) {\n    return this.#frames.get(frameId);\n  }\n  /**\n   * Returns a promise that is resolved once the frame with\n   * the given ID is added to the tree.\n   */\n  waitForFrame(frameId) {\n    const frame = this.getById(frameId);\n    if (frame) {\n      return Promise.resolve(frame);\n    }\n    const deferred = Deferred.create();\n    const callbacks = this.#waitRequests.get(frameId) || new Set();\n    callbacks.add(deferred);\n    return deferred.valueOrThrow();\n  }\n  frames() {\n    return Array.from(this.#frames.values());\n  }\n  addFrame(frame) {\n    this.#frames.set(frame._id, frame);\n    if (frame._parentId) {\n      this.#parentIds.set(frame._id, frame._parentId);\n      if (!this.#childIds.has(frame._parentId)) {\n        this.#childIds.set(frame._parentId, new Set());\n      }\n      this.#childIds.get(frame._parentId).add(frame._id);\n    } else if (!this.#mainFrame) {\n      this.#mainFrame = frame;\n    }\n    this.#waitRequests.get(frame._id)?.forEach(request => {\n      return request.resolve(frame);\n    });\n  }\n  removeFrame(frame) {\n    this.#frames.delete(frame._id);\n    this.#parentIds.delete(frame._id);\n    if (frame._parentId) {\n      this.#childIds.get(frame._parentId)?.delete(frame._id);\n    } else {\n      this.#mainFrame = undefined;\n    }\n  }\n  childFrames(frameId) {\n    const childIds = this.#childIds.get(frameId);\n    if (!childIds) {\n      return [];\n    }\n    return Array.from(childIds).map(id => {\n      return this.getById(id);\n    }).filter(frame => {\n      return frame !== undefined;\n    });\n  }\n  parentFrame(frameId) {\n    const parentId = this.#parentIds.get(frameId);\n    return parentId ? this.getById(parentId) : undefined;\n  }\n}","map":{"version":3,"names":["Deferred","FrameTree","frames","Map","parentIds","childIds","mainFrame","waitRequests","getMainFrame","getById","frameId","get","waitForFrame","frame","Promise","resolve","deferred","create","callbacks","Set","add","valueOrThrow","Array","from","values","addFrame","set","_id","_parentId","has","forEach","request","removeFrame","delete","undefined","childFrames","map","id","filter","parentFrame","parentId"],"sources":["/home/adityasinha/Desktop/React/topdf/node_modules/puppeteer-core/src/common/FrameTree.ts"],"sourcesContent":["/**\n * Copyright 2022 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Frame as BaseFrame} from '../api/Frame.js';\nimport {Deferred} from '../util/Deferred.js';\n\n/**\n * Keeps track of the page frame tree and it's is managed by\n * {@link FrameManager}. FrameTree uses frame IDs to reference frame and it\n * means that referenced frames might not be in the tree anymore. Thus, the tree\n * structure is eventually consistent.\n * @internal\n */\nexport class FrameTree<Frame extends BaseFrame> {\n  #frames = new Map<string, Frame>();\n  // frameID -> parentFrameID\n  #parentIds = new Map<string, string>();\n  // frameID -> childFrameIDs\n  #childIds = new Map<string, Set<string>>();\n  #mainFrame?: Frame;\n  #waitRequests = new Map<string, Set<Deferred<Frame>>>();\n\n  getMainFrame(): Frame | undefined {\n    return this.#mainFrame;\n  }\n\n  getById(frameId: string): Frame | undefined {\n    return this.#frames.get(frameId);\n  }\n\n  /**\n   * Returns a promise that is resolved once the frame with\n   * the given ID is added to the tree.\n   */\n  waitForFrame(frameId: string): Promise<Frame> {\n    const frame = this.getById(frameId);\n    if (frame) {\n      return Promise.resolve(frame);\n    }\n    const deferred = Deferred.create<Frame>();\n    const callbacks =\n      this.#waitRequests.get(frameId) || new Set<Deferred<Frame>>();\n    callbacks.add(deferred);\n    return deferred.valueOrThrow();\n  }\n\n  frames(): Frame[] {\n    return Array.from(this.#frames.values());\n  }\n\n  addFrame(frame: Frame): void {\n    this.#frames.set(frame._id, frame);\n    if (frame._parentId) {\n      this.#parentIds.set(frame._id, frame._parentId);\n      if (!this.#childIds.has(frame._parentId)) {\n        this.#childIds.set(frame._parentId, new Set());\n      }\n      this.#childIds.get(frame._parentId)!.add(frame._id);\n    } else if (!this.#mainFrame) {\n      this.#mainFrame = frame;\n    }\n    this.#waitRequests.get(frame._id)?.forEach(request => {\n      return request.resolve(frame);\n    });\n  }\n\n  removeFrame(frame: Frame): void {\n    this.#frames.delete(frame._id);\n    this.#parentIds.delete(frame._id);\n    if (frame._parentId) {\n      this.#childIds.get(frame._parentId)?.delete(frame._id);\n    } else {\n      this.#mainFrame = undefined;\n    }\n  }\n\n  childFrames(frameId: string): Frame[] {\n    const childIds = this.#childIds.get(frameId);\n    if (!childIds) {\n      return [];\n    }\n    return Array.from(childIds)\n      .map(id => {\n        return this.getById(id);\n      })\n      .filter((frame): frame is Frame => {\n        return frame !== undefined;\n      });\n  }\n\n  parentFrame(frameId: string): Frame | undefined {\n    const parentId = this.#parentIds.get(frameId);\n    return parentId ? this.getById(parentId) : undefined;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}